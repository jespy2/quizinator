What is React proptype array with shape?</h3>
<p>If you want to pass an array of objects to a component with a particular shape then use <code>React.PropTypes.shape()</code> as an argument to <code>React.PropTypes.arrayOf()</code>.</p>
<pre><code class="lang-javascript">ReactComponent.propTypes = {
  <span class="hljs-attribute">arrayWithShape</span>: React<span class="hljs-variable">.PropTypes</span><span class="hljs-variable">.arrayOf</span>(
    React<span class="hljs-variable">.PropTypes</span><span class="hljs-variable">.shape</span>({
      color: React<span class="hljs-variable">.PropTypes</span><span class="hljs-variable">.string</span><span class="hljs-variable">.isRequired</span>,
      fontSize: React<span class="hljs-variable">.PropTypes</span><span class="hljs-variable">.number</span><span class="hljs-variable">.isRequired</span>,
    })
  )<span class="hljs-variable">.isRequired</span>,
};
</code></pre>




</li>
<li><h3 id="how-to-conditionally-apply-class-attributes-">How to conditionally apply class attributes?</h3>
<p>You shouldn&#39;t use curly braces inside quotes because it is going to be evaluated as a string.</p>
<p>```jsx harmony
<div className="btn-panel {this.props.visible ? 'show' : 'hidden'}"></p>
<pre><code>
<span class="hljs-type">Instead</span> you need to move curly braces outside (don<span class="hljs-symbol">'t</span> forget to include spaces between <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">names</span>)</span>:

```jsx harmony
&lt;div className={<span class="hljs-symbol">'btn</span>-panel ' + (<span class="hljs-keyword">this</span>.props.visible ? <span class="hljs-symbol">'sho</span>w' : <span class="hljs-symbol">'hidde</span>n')}&gt;
</code></pre><p><em>Template strings</em> will also work:</p>
<p><code>jsx harmony
&lt;div className={`btn-panel ${this.props.visible ? &#39;show&#39; : &#39;hidden&#39;}`}&gt;</code></p>




</li>
<li><h3 id="what-is-the-difference-between-react-and-reactdom-">What is the difference between React and ReactDOM?</h3>
<p>The <code>react</code> package contains <code>React.createElement()</code>, <code>React.Component</code>, <code>React.Children</code>, and other helpers related to elements and component classes. You can think of these as the isomorphic or universal helpers that you need to build components. The <code>react-dom</code> package contains <code>ReactDOM.render()</code>, and in <code>react-dom/server</code> we have <em>server-side rendering</em> support with <code>ReactDOMServer.renderToString()</code> and <code>ReactDOMServer.renderToStaticMarkup()</code>.</p>




</li>
<li><h3 id="why-reactdom-is-separated-from-react-">Why ReactDOM is separated from React?</h3>
<p>The React team worked on extracting all DOM-related features into a separate library called <em>ReactDOM</em>. React v0.14 is the first release in which the libraries are split. By looking at some of the packages, <code>react-native</code>, <code>react-art</code>, <code>react-canvas</code>, and <code>react-three</code>, it has become clear that the beauty and essence of React has nothing to do with browsers or the DOM.</p>
<p>To build more environments that React can render to, React team planned to split the main React package into two: <code>react</code> and <code>react-dom</code>. This paves the way to writing components that can be shared between the web version of React and React Native.</p>




</li>
<li><h3 id="how-to-use-react-label-element-">How to use React label element?</h3>
<p>If you try to render a <code>&lt;label&gt;</code> element bound to a text input using the standard <code>for</code> attribute, then it produces HTML missing that attribute and prints a warning to the console.</p>
<p>```jsx harmony
<label for={'user'}>{&#39;User&#39;}</label>
<input type={'text'} id={'user'} /></p>
<pre><code>
Since `for` is a reserved keyword <span class="hljs-keyword">in</span> JavaScript, use `htmlFor` instead.

```jsx harmony
&lt;label htmlFor={<span class="hljs-string">'user'</span>}&gt;{<span class="hljs-string">'User'</span>}&lt;/label&gt;
&lt;input type={<span class="hljs-string">'text'</span>} id={<span class="hljs-string">'user'</span>} /&gt;
</code></pre>



</li>
<li><h3 id="how-to-combine-multiple-inline-style-objects-">How to combine multiple inline style objects?</h3>
<p>You can use <em>spread operator</em> in regular React:</p>
<p>```jsx harmony
<button style={{ ...styles.panel.button, ...styles.panel.submitButton }}>
  {&quot;Submit&quot;}
</button></p>
<pre><code>
If you're using React Native then you can use the<span class="hljs-built_in"> array </span>notation:

```jsx harmony
&lt;button style={[styles.panel.button, styles.panel.submitButton]}&gt;
  {<span class="hljs-string">"Submit"</span>}
&lt;/button&gt;
</code></pre>



</li>
<li><h3 id="how-to-re-render-the-view-when-the-browser-is-resized-">How to re-render the view when the browser is resized?</h3>
<p>You can use the <code>useState</code> hook to manage the width and height state variables, and the <code>useEffect</code> hook to add and remove the <code>resize</code> event listener. The <code>[]</code> dependency array passed to useEffect ensures that the effect only runs once (on mount) and not on every re-render.</p>
<pre><code class="lang-javascript"><span class="hljs-keyword">import</span> React, { useState, useEffect } <span class="hljs-keyword">from</span> <span class="hljs-string">"react"</span>;
<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">WindowDimensions</span>(<span class="hljs-params"></span>) </span>{
  <span class="hljs-keyword">const</span> [dimensions, setDimensions] = useState({
    <span class="hljs-attr">width</span>: <span class="hljs-built_in">window</span>.innerWidth,
    <span class="hljs-attr">height</span>: <span class="hljs-built_in">window</span>.innerHeight,
  });

  useEffect(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> {
    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">handleResize</span>(<span class="hljs-params"></span>) </span>{
      setDimensions({
        <span class="hljs-attr">width</span>: <span class="hljs-built_in">window</span>.innerWidth,
        <span class="hljs-attr">height</span>: <span class="hljs-built_in">window</span>.innerHeight,
      });
    }
    <span class="hljs-built_in">window</span>.addEventListener(<span class="hljs-string">"resize"</span>, handleResize);
    <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> <span class="hljs-built_in">window</span>.removeEventListener(<span class="hljs-string">"resize"</span>, handleResize);
  }, []);

  <span class="hljs-keyword">return</span> (
    <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>
      {dimensions.width} x {dimensions.height}
    <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span>
  );
}
</code></pre>
<details>
  <summary><h4>Using Class Component</h4></summary>

  You can listen to the <code>resize</code> event in <code>componentDidMount()</code> and then update the dimensions (<code>width</code> and <code>height</code>). You should remove the listener in <code>componentWillUnmount()</code> method.

  <code>javascript
      class WindowDimensions extends React.Component {
        constructor(props) {
          super(props);
          this.updateDimensions = this.updateDimensions.bind(this);
        }

        componentWillMount() {
          this.updateDimensions();
        }

        componentDidMount() {
          window.addEventListener(&quot;resize&quot;, this.updateDimensions);
        }

        componentWillUnmount() {
          window.removeEventListener(&quot;resize&quot;, this.updateDimensions);
        }

        updateDimensions() {
          this.setState({
            width: window.innerWidth,
            height: window.innerHeight,
          });
        }

        render() {
          return (
            &lt;span&gt;
              {this.state.width} x {this.state.height}
            &lt;/span&gt;
          );
        }
      }</code>
</details>

</li>
</ol>




<ol>
<li><h3 id="what-is-the-difference-between-setstate-and-replacestate-methods-">What is the difference between <code>setState()</code> and <code>replaceState()</code> methods?</h3>
<p>When you use <code>setState()</code> the current and previous states are merged. <code>replaceState()</code> throws out the current state, and replaces it with only what you provide. Usually <code>setState()</code> is used unless you really need to remove all previous keys for some reason. You can also set state to <code>false</code>/<code>null</code> in <code>setState()</code> instead of using <code>replaceState()</code>.</p>
</li>
</ol>




<ol>
<li><h3 id="how-to-listen-to-state-changes-">How to listen to state changes?</h3>
<p>The <code>componentDidUpdate</code> lifecycle method will be called when state changes. You can compare provided state and props values with current state and props to determine if something meaningful changed.</p>
<pre><code><span class="hljs-function"><span class="hljs-title">componentDidUpdate</span><span class="hljs-params">(object prevProps, object prevState)</span></span>
</code></pre><p><strong>Note:</strong> The previous releases of ReactJS also uses <code>componentWillUpdate(object nextProps, object nextState)</code> for state changes. It has been deprecated in latest releases.</p>
</li>
</ol>




<ol>
<li><h3 id="what-is-the-recommended-approach-of-removing-an-array-element-in-react-state-">What is the recommended approach of removing an array element in React state?</h3>
<p>The better approach is to use <code>Array.prototype.filter()</code> method.</p>
<p>For example, let&#39;s create a <code>removeItem()</code> method for updating the state.</p>
<pre><code class="lang-javascript"><span class="hljs-function"><span class="hljs-title">removeItem</span><span class="hljs-params">(index)</span></span> {
  this.setState({
    data: this<span class="hljs-selector-class">.state</span><span class="hljs-selector-class">.data</span><span class="hljs-selector-class">.filter</span>((item, i) =&gt; <span class="hljs-selector-tag">i</span> !== index)
  })
}
</code></pre>
</li>
</ol>




<ol>
<li><h3 id="is-it-possible-to-use-react-without-rendering-html-">Is it possible to use React without rendering HTML?</h3>
<p>It is possible. Below are the possible options:</p>
<p>```jsx harmony
render() {
  return false
}</p>
<pre><code>
```jsx harmony
render() {
  <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>
}
</code></pre><p>```jsx harmony
render() {
  return null
}</p>
<pre><code>
<span class="hljs-symbol">React version &gt;=16.0.0:</span>

```jsx harmony
render() {
  <span class="hljs-keyword">return</span> []
}
</code></pre><p>```jsx harmony
render() {
  return &quot;&quot;
}</p>
<pre><code>
React version &gt;=<span class="hljs-number">16.2</span><span class="hljs-number">.0</span>:

`<span class="javascript"></span>``<span class="javascript">jsx harmony
render() {
  <span class="hljs-keyword">return</span> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">React.Fragment</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">React.Fragment</span>&gt;</span>
}</span></span>
</code></pre><p>```jsx harmony
render() {
  return &lt;&gt;&lt;/&gt;
}</p>
<pre><code>
<span class="hljs-symbol">React version &gt;=18.0.0:</span>

```jsx harmony
render() {
  <span class="hljs-keyword">return</span> undefined
}
</code></pre></li>
</ol>




<ol>
<li><h3 id="how-to-pretty-print-json-with-react-">How to pretty print JSON with React?</h3>
<p>We can use <code>&lt;pre&gt;</code> tag so that the formatting of the <code>JSON.stringify()</code> is retained:</p>
<p>```jsx harmony
const data = { name: &quot;John&quot;, age: 42 };</p>
<p>class User extends React.Component {
  render() {</p>
<pre><code><span class="hljs-keyword">return</span> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">pre</span>&gt;</span>{JSON.stringify(data, null, 2)}<span class="hljs-tag">&lt;/<span class="hljs-name">pre</span>&gt;</span></span>;
</code></pre><p>  }
}</p>
<p>React.render(<User />, document.getElementById(&quot;container&quot;));
```</p>
</li>
</ol>




<ol>
<li><h3 id="why-you-can-t-update-props-in-react-">Why you can&#39;t update props in React?</h3>
<p>The React philosophy is that props should be <em>immutable</em> and <em>top-down</em>. This means that a parent can send any prop values to a child, but the child can&#39;t modify received props.</p>
</li>
</ol>




<ol>
<li><h3 id="how-to-focus-an-input-element-on-page-load-">How to focus an input element on page load?</h3>
<p>You can do it by creating <em>ref</em> for <code>input</code> element and using it in <code>componentDidMount()</code>:</p>
<p>```jsx harmony
class App extends React.Component {
  componentDidMount() {</p>
<pre><code><span class="hljs-selector-tag">this</span><span class="hljs-selector-class">.nameInput</span><span class="hljs-selector-class">.focus</span>();
</code></pre><p>  }</p>
<p>  render() {</p>
<pre><code><span class="hljs-keyword">return</span> (
  &lt;div&gt;
    &lt;<span class="hljs-keyword">input</span> defaultValue={<span class="hljs-string">"Won't focus"</span>} /&gt;
    &lt;<span class="hljs-keyword">input</span>
      <span class="hljs-keyword">ref</span>={(<span class="hljs-keyword">input</span>) =&gt; (<span class="hljs-keyword">this</span><span class="hljs-variable">.nameInput</span> = <span class="hljs-keyword">input</span>)}
      defaultValue={<span class="hljs-string">"Will focus"</span>}
    /&gt;
  &lt;/div&gt;
);
</code></pre><p>  }
}</p>
<p>ReactDOM.render(<App />, document.getElementById(&quot;app&quot;));</p>
<pre><code>
Also <span class="hljs-keyword">in</span> Functional component (react <span class="hljs-number">16.08</span> <span class="hljs-keyword">and</span> above)

```jsx harmony
<span class="hljs-keyword">import</span> React, { useEffect, useRef } <span class="hljs-keyword">from</span> <span class="hljs-string">"react"</span>;

const App = <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> {
  const inputElRef = useRef(null);

  useEffect(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> {
    inputElRef.current.focus();
  }, []);

  <span class="hljs-keyword">return</span> (
    &lt;div&gt;
      &lt;input defaultValue={<span class="hljs-string">"Won't focus"</span>} /&gt;
      &lt;input ref={inputElRef} defaultValue={<span class="hljs-string">"Will focus"</span>} /&gt;
    &lt;/div&gt;
  );
};

ReactDOM.render(&lt;App /&gt;, document.getElementById(<span class="hljs-string">"app"</span>));
</code></pre>



</li>
<li><h3 id="what-are-the-possible-ways-of-updating-objects-in-state-">What are the possible ways of updating objects in state?</h3>
<ol>
<li><p><strong>Calling <code>setState()</code> with an object to merge with state:</strong></p>
<ul>
<li><p>Using <code>Object.assign()</code> to create a copy of the object:</p>
<pre><code class="lang-javascript">const <span class="hljs-keyword">user</span> = Object.assign({}, this.<span class="hljs-keyword">state</span>.<span class="hljs-keyword">user</span>, { age: <span class="hljs-number">42</span> });
this.<span class="hljs-built_in">set</span>State({ <span class="hljs-keyword">user</span> });
</code></pre>
</li>
<li><p>Using <em>spread operator</em>:</p>
<pre><code class="lang-javascript">const <span class="hljs-keyword">user</span> = { ...this.<span class="hljs-keyword">state</span>.<span class="hljs-keyword">user</span>, age: <span class="hljs-number">42</span> };
this.<span class="hljs-built_in">set</span>State({ <span class="hljs-keyword">user</span> });
</code></pre>
</li>
</ul>
</li>
<li><p><strong>Calling <code>setState()</code> with a function:</strong></p>
<pre><code class="lang-javascript"><span class="hljs-keyword">this</span>.setState(<span class="hljs-function"><span class="hljs-params">(prevState)</span> =&gt;</span> ({
  user: {
    ...prevState.user,
    age: <span class="hljs-number">42</span>,
  },
}));
</code></pre>
</li>
</ol>
</li>
</ol>




<ol>
<li><h3 id="how-can-we-find-the-version-of-react-at-runtime-in-the-browser-">How can we find the version of React at runtime in the browser?</h3>
<p>You can use <code>React.version</code> to get the version.</p>
<p>```jsx harmony
const REACT_VERSION = React.version;</p>
<p>ReactDOM.render(
  <div>{<code>React version: ${REACT_VERSION}</code>}</div>,
  document.getElementById(&quot;app&quot;)
);
```</p>
</li>
</ol>




<ol>
<li><h3 id="what-are-the-approaches-to-include-polyfills-in-your-create-react-app-">What are the approaches to include polyfills in your <code>create-react-app</code>?</h3>
<p>There are approaches to include polyfills in create-react-app,</p>
<ol>
<li><p><strong>Manual import from <code>core-js</code>:</strong></p>
<p>Create a file called (something like) <code>polyfills.js</code> and import it into root <code>index.js</code> file. Run <code>npm install core-js</code> or <code>yarn add core-js</code> and import your specific required features.</p>
<pre><code class="lang-javascript"><span class="hljs-keyword">import</span> <span class="hljs-string">"core-js/fn/array/find"</span>;
<span class="hljs-keyword">import</span> <span class="hljs-string">"core-js/fn/array/includes"</span>;
<span class="hljs-keyword">import</span> <span class="hljs-string">"core-js/fn/number/is-nan"</span>;
</code></pre>
</li>
<li><p><strong>Using Polyfill service:</strong></p>
<p>Use the polyfill.io CDN to retrieve custom, browser-specific polyfills by adding this line to <code>index.html</code>:</p>
<pre><code class="lang-html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"https://cdn.polyfill.io/v2/polyfill.min.js?features=default,Array.prototype.includes"</span>&gt;</span><span class="undefined"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>
</code></pre>
<p>In the above script we had to explicitly request the <code>Array.prototype.includes</code> feature as it is not included in the default feature set.</p>
</li>
</ol>
</li>
</ol>




<ol>
<li><h3 id="how-to-use-https-instead-of-http-in-create-react-app-">How to use https instead of http in create-react-app?</h3>
<p>You just need to use <code>HTTPS=true</code> configuration. You can edit your <code>package.json</code> scripts section:</p>
<pre><code class="lang-json"><span class="hljs-string">"scripts"</span>: {
  <span class="hljs-string">"start"</span>: <span class="hljs-string">"set HTTPS=true &amp;&amp; react-scripts start"</span>
}
</code></pre>
<p>or just run <code>set HTTPS=true &amp;&amp; npm start</code></p>
</li>
</ol>




<ol>
<li><h3 id="how-to-avoid-using-relative-path-imports-in-create-react-app-">How to avoid using relative path imports in create-react-app?</h3>
<p>Create a file called <code>.env</code> in the project root and write the import path:</p>
<pre><code><span class="hljs-attr">NODE_PATH</span>=src/app
</code></pre><p>After that restart the development server. Now you should be able to import anything inside <code>src/app</code> without relative paths.</p>
</li>
</ol>




<ol>
<li><h3 id="how-to-add-google-analytics-for-react-router-">How to add Google Analytics for React Router?</h3>
<p>Add a listener on the <code>history</code> object to record each page view:</p>
<pre><code class="lang-javascript">history.listen(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">location</span>) </span>{
  <span class="hljs-built_in">window</span>.ga(<span class="hljs-string">"set"</span>, <span class="hljs-string">"page"</span>, location.pathname + location.search);
  <span class="hljs-built_in">window</span>.ga(<span class="hljs-string">"send"</span>, <span class="hljs-string">"pageview"</span>, location.pathname + location.search);
});
</code></pre>
</li>
</ol>




<ol>
<li><h3 id="how-to-update-a-component-every-second-">How to update a component every second?</h3>
<p>You need to use <code>setInterval()</code> to trigger the change, but you also need to clear the timer when the component unmounts to prevent errors and memory leaks.</p>
<pre><code class="lang-javascript"><span class="hljs-function"><span class="hljs-title">componentDidMount</span><span class="hljs-params">()</span></span> {
  this<span class="hljs-selector-class">.interval</span> = setInterval(() =&gt; this.setState({ <span class="hljs-selector-tag">time</span>: Date.now() }), <span class="hljs-number">1000</span>)
}

<span class="hljs-function"><span class="hljs-title">componentWillUnmount</span><span class="hljs-params">()</span></span> {
  clearInterval(this.interval)
}
</code></pre>
</li>
</ol>




<ol>
<li><h3 id="how-do-you-apply-vendor-prefixes-to-inline-styles-in-react-">How do you apply vendor prefixes to inline styles in React?</h3>
<p>React <em>does not</em> apply <em>vendor prefixes</em> automatically. You need to add vendor prefixes manually.</p>
<p>```jsx harmony
&lt;div
  style={{</p>
<pre><code><span class="hljs-symbol">transform:</span> <span class="hljs-string">"rotate(90deg)"</span>,
<span class="hljs-symbol">WebkitTransform:</span> <span class="hljs-string">"rotate(90deg)"</span>, <span class="hljs-comment">// note the capital 'W' here</span>
<span class="hljs-symbol">msTransform:</span> <span class="hljs-string">"rotate(90deg)"</span>, <span class="hljs-comment">// 'ms' is the only lowercase vendor prefix</span>
</code></pre><p>  }}
/&gt;
```</p>
</li>
</ol>




<ol>
<li><h3 id="how-to-import-and-export-components-using-react-and-es6-">How to import and export components using React and ES6?</h3>
<p>You should use default for exporting the components</p>
<p>```jsx harmony
import React from &quot;react&quot;;
import User from &quot;user&quot;;</p>
<p>export default class MyProfile extends React.Component {
  render() {</p>
<pre><code><span class="hljs-keyword">return</span> &lt;User <span class="hljs-class"><span class="hljs-keyword">type</span></span>=<span class="hljs-string">"customer"</span>&gt;<span class="hljs-comment">//...&lt;/User&gt;;</span>
</code></pre><p>  }
}
```</p>
<p>With the export specifier, the MyProfile is going to be the member and exported to this module and the same can be imported without mentioning the name in other components.</p>
</li>
</ol>




<ol>
<li><h3 id="why-is-a-component-constructor-called-only-once-">Why is a component constructor called only once?</h3>
<p>React&#39;s <em>reconciliation</em> algorithm assumes that without any information to the contrary, if a custom component appears in the same place on subsequent renders, it&#39;s the same component as before, so reuses the previous instance rather than creating a new one.</p>
</li>
</ol>




<ol>
<li><h3 id="how-to-define-constants-in-react-">How to define constants in React?</h3>
<p>You can use ES7 <code>static</code> field to define constant.</p>
<pre><code class="lang-javascript"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyComponent</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span> </span>{
  static <span class="hljs-type">DEFAULT_PAGINATION</span> = <span class="hljs-number">10</span>;
}
</code></pre>
</li>
</ol>




<ol>
<li><h3 id="how-to-programmatically-trigger-click-event-in-react-">How to programmatically trigger click event in React?</h3>
<p>You could use the ref prop to acquire a reference to the underlying <code>HTMLInputElement</code> object through a callback, store the reference as a class property, then use that reference to later trigger a click from your event handlers using the <code>HTMLElement.click</code> method.</p>
<p>This can be done in two steps:</p>
<ol>
<li><p>Create ref in render method:</p>
<p><code>jsx harmony
&lt;input ref={(input) =&gt; (this.inputElement = input)} /&gt;</code></p>
</li>
<li><p>Apply click event in your event handler:</p>
<pre><code class="lang-javascript"><span class="hljs-keyword">this</span>.inputElement.<span class="hljs-built_in">click</span>();
</code></pre>
</li>
</ol>
</li>
</ol>




<ol>
<li><h3 id="is-it-possible-to-use-async-await-in-plain-react-">Is it possible to use async/await in plain React?</h3>
<p>If you want to use <code>async</code>/<code>await</code> in React, you will need <em>Babel</em> and <a href="https://babeljs.io/docs/en/babel-plugin-transform-async-to-generator">transform-async-to-generator</a> plugin. React Native ships with Babel and a set of transforms.</p>
</li>
</ol>




<ol>
<li><h3 id="what-are-the-common-folder-structures-for-react-">What are the common folder structures for React?</h3>
<p>There are two common practices for React project file structure.</p>
<ol>
<li><p><strong>Grouping by features or routes:</strong></p>
<p>One common way to structure projects is locate CSS, JS, and tests together, grouped by feature or route.</p>
<pre><code>common/
├─ Avatar<span class="hljs-selector-class">.js</span>
├─ Avatar<span class="hljs-selector-class">.css</span>
├─ APIUtils<span class="hljs-selector-class">.js</span>
└─ APIUtils<span class="hljs-selector-class">.test</span><span class="hljs-selector-class">.js</span>
feed/
├─ index<span class="hljs-selector-class">.js</span>
├─ Feed<span class="hljs-selector-class">.js</span>
├─ Feed<span class="hljs-selector-class">.css</span>
├─ FeedStory<span class="hljs-selector-class">.js</span>
├─ FeedStory<span class="hljs-selector-class">.test</span><span class="hljs-selector-class">.js</span>
└─ FeedAPI<span class="hljs-selector-class">.js</span>
profile/
├─ index<span class="hljs-selector-class">.js</span>
├─ Profile<span class="hljs-selector-class">.js</span>
├─ ProfileHeader<span class="hljs-selector-class">.js</span>
├─ ProfileHeader<span class="hljs-selector-class">.css</span>
└─ ProfileAPI.js
</code></pre></li>
<li><p><strong>Grouping by file type:</strong></p>
<p>Another popular way to structure projects is to group similar files together.</p>
<pre><code>api/
├─ APIUtils<span class="hljs-selector-class">.js</span>
├─ APIUtils<span class="hljs-selector-class">.test</span><span class="hljs-selector-class">.js</span>
├─ ProfileAPI<span class="hljs-selector-class">.js</span>
└─ UserAPI<span class="hljs-selector-class">.js</span>
components/
├─ Avatar<span class="hljs-selector-class">.js</span>
├─ Avatar<span class="hljs-selector-class">.css</span>
├─ Feed<span class="hljs-selector-class">.js</span>
├─ Feed<span class="hljs-selector-class">.css</span>
├─ FeedStory<span class="hljs-selector-class">.js</span>
├─ FeedStory<span class="hljs-selector-class">.test</span><span class="hljs-selector-class">.js</span>
├─ Profile<span class="hljs-selector-class">.js</span>
├─ ProfileHeader<span class="hljs-selector-class">.js</span>
└─ ProfileHeader.css
</code></pre></li>
</ol>
</li>
</ol>




<ol>
<li><h3 id="what-are-the-popular-packages-for-animation-">What are the popular packages for animation?</h3>
<p><em>React Transition Group</em> and <em>React Motion</em> are popular animation packages in React ecosystem.</p>
</li>
</ol>




<ol>
<li><h3 id="what-is-the-benefit-of-styles-modules-">What is the benefit of styles modules?</h3>
<p>It is recommended to avoid hard coding style values in components. Any values that are likely to be used across different UI components should be extracted into their own modules.</p>
<p>For example, these styles could be extracted into a separate component:</p>
<pre><code class="lang-javascript">export const colors = {
  white,
  black,
  blue,
};

export const space = [<span class="hljs-number">0</span>, <span class="hljs-number">8</span>, <span class="hljs-number">16</span>, <span class="hljs-number">32</span>, <span class="hljs-number">64</span>];
</code></pre>
<p>And then imported individually in other components:</p>
<pre><code class="lang-javascript">import { <span class="hljs-literal">space</span>, colors } <span class="hljs-keyword">from</span> <span class="hljs-string">"./styles"</span>;
</code></pre>
</li>
</ol>




<ol>
<li><h3 id="what-are-the-popular-react-specific-linters-">What are the popular React-specific linters?</h3>
<p>ESLint is a popular JavaScript linter. There are plugins available that analyse specific code styles. One of the most common for React is an npm package called <code>eslint-plugin-react</code>. By default, it will check a number of best practices, with rules checking things from keys in iterators to a complete set of prop types.</p>
<p>Another popular plugin is <code>eslint-plugin-jsx-a11y</code>, which will help fix common issues with accessibility. As JSX offers slightly different syntax to regular HTML, issues with <code>alt</code> text and <code>tabindex</code>, for example, will not be picked up by regular plugins.</p>
</li>
</ol>




<ol>
<li><h3 id="how-to-make-ajax-call-and-in-which-component-lifecycle-methods-should-i-make-an-ajax-call-">How to make AJAX call and in which component lifecycle methods should I make an AJAX call?</h3>
<p>You can use AJAX libraries such as Axios, jQuery AJAX, and the browser built-in <code>fetch</code>. You should fetch data in the <code>componentDidMount()</code> lifecycle method. This is so you can use <code>setState()</code> to update your component when the data is retrieved.</p>
<p>For example, the employees list fetched from API and set local state:</p>
<p>```jsx harmony
class MyComponent extends React.Component {
  constructor(props) {</p>
<pre><code>super(props);
this.<span class="hljs-keyword">state</span> = {
  employees: [],
  error: null,
};
</code></pre><p>  }</p>
<p>  componentDidMount() {</p>
<pre><code>fetch(<span class="hljs-string">"https://api.example.com/items"</span>)
  .<span class="hljs-keyword">then</span>(<span class="hljs-function"><span class="hljs-params">(res)</span> =&gt;</span> res.json())
  .<span class="hljs-keyword">then</span>(
    <span class="hljs-function"><span class="hljs-params">(result)</span> =&gt;</span> {
      <span class="hljs-keyword">this</span>.setState({
        employees: result.employees,
      });
    },
    <span class="hljs-function"><span class="hljs-params">(error)</span> =&gt;</span> {
      <span class="hljs-keyword">this</span>.setState({ error });
    }
  );
</code></pre><p>  }</p>
<p>  render() {</p>
<pre><code><span class="hljs-keyword">const</span> { error, employees } = <span class="hljs-keyword">this</span>.state;
<span class="hljs-keyword">if</span> (error) {
  <span class="hljs-keyword">return</span> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>Error: {error.message}<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>;
} <span class="hljs-keyword">else</span> {
  <span class="hljs-keyword">return</span> (
    <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span>
      {employees.map((employee) =&gt; (
        <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">key</span>=<span class="hljs-string">{employee.name}</span>&gt;</span>
          {employee.name}-{employee.experience}
        <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>
      ))}
    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span>
  );
}
</code></pre><p>  }
}
```</p>
</li>
</ol>




<ol>
<li><h3 id="what-are-render-props-">What are render props?</h3>
<p><strong>Render Props</strong> is a simple technique for sharing code between components using a prop whose value is a function. The below component uses render prop which returns a React element.</p>
<p><code>jsx harmony
&lt;DataProvider render={(data) =&gt; &lt;h1&gt;{`Hello ${data.target}`}&lt;/h1&gt;} /&gt;</code></p>
<p>Libraries such as React Router and DownShift are using this pattern.</p>
</li>
</ol>
<h2 id="react-router">React Router</h2>




<ol>
<li><h3 id="what-is-react-router-">What is React Router?</h3>
<p>React Router is a powerful routing library built on top of React that helps you add new screens and flows to your application incredibly quickly, all while keeping the URL in sync with what&#39;s being displayed on the page.</p>
</li>
</ol>




<ol>
<li><h3 id="how-react-router-is-different-from-history-library-">How React Router is different from history library?</h3>
<p>React Router is a wrapper around the <code>history</code> library which handles interaction with the browser&#39;s <code>window.history</code> with its browser and hash histories. It also provides memory history which is useful for environments that don&#39;t have global history, such as mobile app development (React Native) and unit testing with Node.</p>
</li>
</ol>




<ol>
<li><h3 id="what-are-the-router-components-of-react-router-v4-">What are the <code>&lt;Router&gt;</code> components of React Router v4?</h3>
<p>React Router v4 provides below 3 <code>&lt;Router&gt;</code> components:</p>
<ol>
<li><code>&lt;BrowserRouter&gt;</code></li>
<li><code>&lt;HashRouter&gt;</code></li>
<li><code>&lt;MemoryRouter&gt;</code></li>
</ol>
<p>The above components will create <em>browser</em>, <em>hash</em>, and <em>memory</em> history instances. React Router v4 makes the properties and methods of the <code>history</code> instance associated with your router available through the context in the <code>router</code> object.</p>
</li>
</ol>




<ol>
<li><h3 id="what-is-the-purpose-of-push-and-replace-methods-of-history-">What is the purpose of <code>push()</code> and <code>replace()</code> methods of <code>history</code>?</h3>
<p>A history instance has two methods for navigation purpose.</p>
<ol>
<li><code>push()</code></li>
<li><code>replace()</code></li>
</ol>
<p>If you think of the history as an array of visited locations, <code>push()</code> will add a new location to the array and <code>replace()</code> will replace the current location in the array with the new one.</p>
</li>
</ol>




<ol>
<li><h3 id="how-do-you-programmatically-navigate-using-react-router-v4-">How do you programmatically navigate using React Router v4?</h3>
<p>There are three different ways to achieve programmatic routing/navigation within components.</p>
<ol>
<li><p><strong>Using the <code>withRouter()</code> higher-order function:</strong></p>
<p>The <code>withRouter()</code> higher-order function will inject the history object as a prop of the component. This object provides <code>push()</code> and <code>replace()</code> methods to avoid the usage of context.</p>
<p>```jsx harmony
import { withRouter } from &quot;react-router-dom&quot;; // this also works with &#39;react-router-native&#39;</p>
<p>const Button = withRouter(({ history }) =&gt; (
  &lt;button</p>
<pre><code><span class="hljs-attribute">type</span>=<span class="hljs-string">"button"</span>
<span class="hljs-attribute">onClick</span>={() =&gt; {
  history.push(<span class="hljs-string">"/new-location"</span>)<span class="hljs-comment">;</span>
}}
</code></pre><p>  &gt;</p>
<pre><code>{<span class="hljs-string">"Click Me!"</span>}
</code></pre><p>  </button>
));
```</p>
</li>
<li><p><strong>Using <code>&lt;Route&gt;</code> component and render props pattern:</strong></p>
<p>The <code>&lt;Route&gt;</code> component passes the same props as <code>withRouter()</code>, so you will be able to access the history methods through the history prop.</p>
<p>```jsx harmony
import { Route } from &quot;react-router-dom&quot;;</p>
<p>const Button = () =&gt; (
  &lt;Route</p>
<pre><code>render={({ history }) =&gt; (
  &lt;button
    type=<span class="hljs-string">"button"</span>
    onClick={() =&gt; {
      history.push(<span class="hljs-string">"/new-location"</span>);
    }}
  &gt;
    {<span class="hljs-string">"Click Me!"</span>}
  &lt;/button&gt;
)}
</code></pre><p>  /&gt;
);
```</p>
</li>
<li><p><strong>Using context:</strong></p>
<p>This option is not recommended and treated as unstable API.</p>
<p>```jsx harmony
const Button = (props, context) =&gt; (
  &lt;button</p>
<pre><code><span class="hljs-attribute">type</span>=<span class="hljs-string">"button"</span>
<span class="hljs-attribute">onClick</span>={() =&gt; {
  context.history.push(<span class="hljs-string">"/new-location"</span>)<span class="hljs-comment">;</span>
}}
</code></pre><p>  &gt;</p>
<pre><code>{<span class="hljs-string">"Click Me!"</span>}
</code></pre><p>  </button>
);</p>
<p>Button.contextTypes = {
  history: React.PropTypes.shape({</p>
<pre><code>push: React<span class="hljs-selector-class">.PropTypes</span><span class="hljs-selector-class">.func</span><span class="hljs-selector-class">.isRequired</span>,
</code></pre><p>  }),
};
```</p>
</li>
</ol>
</li>
</ol>




<ol>
<li><h3 id="how-to-get-query-parameters-in-react-router-v4-">How to get query parameters in React Router v4?</h3>
<p>The ability to parse query strings was taken out of React Router v4 because there have been user requests over the years to support different implementation. So the decision has been given to users to choose the implementation they like. The recommended approach is to use query strings library.</p>
<pre><code class="lang-javascript"><span class="hljs-attribute">const queryString</span> = require(<span class="hljs-string">"query-string"</span>);
<span class="hljs-attribute">const parsed</span> = queryString.parse(props.location.search);
</code></pre>
<p>You can also use <code>URLSearchParams</code> if you want something native:</p>
<pre><code class="lang-javascript"><span class="hljs-keyword">const</span> <span class="hljs-keyword">params</span> = <span class="hljs-keyword">new</span> URLSearchParams(props.location.search);
<span class="hljs-keyword">const</span> foo = <span class="hljs-keyword">params</span>.<span class="hljs-keyword">get</span>(<span class="hljs-string">"name"</span>);
</code></pre>
<p>You should use a <em>polyfill</em> for IE11.</p>
</li>
</ol>




<ol>
<li><h3 id="why-you-get-router-may-have-only-one-child-element-warning-">Why you get &quot;Router may have only one child element&quot; warning?</h3>
<p>You have to wrap your Route&#39;s in a <code>&lt;Switch&gt;</code> block because <code>&lt;Switch&gt;</code> is unique in that it renders a route exclusively.</p>
<p>At first you need to add <code>Switch</code> to your imports:</p>
<pre><code class="lang-javascript"><span class="hljs-keyword">import</span> { <span class="hljs-keyword">Switch</span>, Router, Route } <span class="hljs-keyword">from</span> <span class="hljs-string">"react-router"</span>;
</code></pre>
<p>Then define the routes within <code>&lt;Switch&gt;</code> block:</p>
<p>```jsx harmony
<Router>
  <Switch></p>
<pre><code><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">Route</span> </span></span><span class="hljs-template-tag">{/* <span class="hljs-name">...</span> */}</span><span class="xml"><span class="hljs-tag"> /&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">Route</span> </span></span><span class="hljs-template-tag">{/* <span class="hljs-name">...</span> */}</span><span class="xml"><span class="hljs-tag"> /&gt;</span></span>
</code></pre><p>  </Switch>
</Router>
```</p>
</li>
</ol>




<ol>
<li><h3 id="how-to-pass-params-to-history-push-method-in-react-router-v4-">How to pass params to <code>history.push</code> method in React Router v4?</h3>
<p>While navigating you can pass props to the <code>history</code> object:</p>
<pre><code class="lang-javascript"><span class="hljs-selector-tag">this</span><span class="hljs-selector-class">.props</span><span class="hljs-selector-class">.history</span><span class="hljs-selector-class">.push</span>({
  <span class="hljs-attribute">pathname</span>: <span class="hljs-string">"/template"</span>,
  search: <span class="hljs-string">"?name=sudheer"</span>,
  state: { detail: response.data },
});
</code></pre>
<p>The <code>search</code> property is used to pass query params in <code>push()</code> method.</p>
</li>
</ol>




<ol>
<li><h3 id="how-to-implement-_default_-or-_notfound_-page-">How to implement <em>default</em> or <em>NotFound</em> page?</h3>
<p>A <code>&lt;Switch&gt;</code> renders the first child <code>&lt;Route&gt;</code> that matches. A <code>&lt;Route&gt;</code> with no path always matches. So you just need to simply drop path attribute as below</p>
<p><code>jsx harmony
&lt;Switch&gt;
  &lt;Route exact path=&quot;/&quot; component={Home} /&gt;
  &lt;Route path=&quot;/user&quot; component={User} /&gt;
  &lt;Route component={NotFound} /&gt;
&lt;/Switch&gt;</code></p>
</li>
</ol>




<ol>
<li><h3 id="how-to-get-history-on-react-router-v4-">How to get history on React Router v4?</h3>
<p>Below are the list of steps to get history object on React Router v4,</p>
<ol>
<li><p>Create a module that exports a <code>history</code> object and import this module across the project.</p>
<p>For example, create <code>history.js</code> file:</p>
<pre><code class="lang-javascript"><span class="hljs-keyword">import</span> { createBrowserHistory } from <span class="hljs-string">"history"</span>;

<span class="hljs-function"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title">createBrowserHistory</span><span class="hljs-params">({
  <span class="hljs-comment">/* pass a configuration object here if needed */</span>
})</span></span>;
</code></pre>
</li>
<li><p>You should use the <code>&lt;Router&gt;</code> component instead of built-in routers. Import the above <code>history.js</code> inside <code>index.js</code> file:</p>
<p>```jsx harmony
import { Router } from &quot;react-router-dom&quot;;
import history from &quot;./history&quot;;
import App from &quot;./App&quot;;</p>
<p>ReactDOM.render(
  <Router history={history}></p>
<pre><code><span class="hljs-section">&lt;App /&gt;</span>
</code></pre><p>  </Router>,
  holder
);
```</p>
</li>
<li><p>You can also use push method of <code>history</code> object similar to built-in history object:</p>
<pre><code class="lang-javascript"><span class="hljs-comment">// some-other-file.js</span>
<span class="hljs-keyword">import</span> history <span class="hljs-keyword">from</span> <span class="hljs-string">"./history"</span>;

history.<span class="hljs-keyword">push</span>(<span class="hljs-string">"/go-here"</span>);
</code></pre>
</li>
</ol>
</li>
</ol>




<ol>
<li><h3 id="how-to-perform-automatic-redirect-after-login-">How to perform automatic redirect after login?</h3>
<p>The <code>react-router</code> package provides <code>&lt;Redirect&gt;</code> component in React Router. Rendering a <code>&lt;Redirect&gt;</code> will navigate to a new location. Like server-side redirects, the new location will override the current location in the history stack.</p>
<pre><code class="lang-javascript"><span class="hljs-keyword">import</span> <span class="hljs-type">React</span>, { <span class="hljs-type">Component</span> } from <span class="hljs-string">"react"</span>;
<span class="hljs-keyword">import</span> { <span class="hljs-type">Redirect</span> } from <span class="hljs-string">"react-router"</span>;

export <span class="hljs-keyword">default</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LoginComponent</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Component</span> </span>{
  render() {
    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.state.isLoggedIn === <span class="hljs-literal">true</span>) {
      <span class="hljs-keyword">return</span> &lt;<span class="hljs-type">Redirect</span> to=<span class="hljs-string">"/your/redirect/page"</span> /&gt;;
    } <span class="hljs-keyword">else</span> {
      <span class="hljs-keyword">return</span> &lt;div&gt;{<span class="hljs-string">"Login Please"</span>}&lt;/div&gt;;
    }
  }
}
</code></pre>
</li>
</ol>
<h2 id="react-internationalization">React Internationalization</h2>




<ol>
<li><h3 id="what-is-react-intl-">What is React Intl?</h3>
<p>The <em>React Intl</em> library makes internationalization in React straightforward, with off-the-shelf components and an API that can handle everything from formatting strings, dates, and numbers, to pluralization. React Intl is part of <em>FormatJS</em> which provides bindings to React via its components and API.</p>
</li>
</ol>




<ol>
<li><h3 id="what-are-the-main-features-of-react-intl-">What are the main features of React Intl?</h3>
<p>Below are the main features of React Intl,</p>
<ol>
<li>Display numbers with separators.</li>
<li>Display dates and times correctly.</li>
<li>Display dates relative to &quot;now&quot;.</li>
<li>Pluralize labels in strings.</li>
<li>Support for 150+ languages.</li>
<li>Runs in the browser and Node.</li>
<li>Built on standards.</li>
</ol>
</li>
</ol>




<ol>
<li><h3 id="what-are-the-two-ways-of-formatting-in-react-intl-">What are the two ways of formatting in React Intl?</h3>
<p>The library provides two ways to format strings, numbers, and dates:</p>
<ol>
<li><p><strong>Using react components:</strong></p>
<p><code>jsx harmony
&lt;FormattedMessage
  id={&quot;account&quot;}
  defaultMessage={&quot;The amount is less than minimum balance.&quot;}
/&gt;</code></p>
</li>
<li><p><strong>Using an API:</strong></p>
<pre><code class="lang-javascript">const messages = defineMessages({
<span class="hljs-symbol">  accountMessage:</span> {
<span class="hljs-symbol">    id:</span> <span class="hljs-string">"account"</span>,
<span class="hljs-symbol">    defaultMessage:</span> <span class="hljs-string">"The amount is less than minimum balance."</span>,
  },
});

formatMessage(messages.accountMessage);
</code></pre>
</li>
</ol>
</li>
</ol>




<ol>
<li><h3 id="how-to-use-formattedmessage-as-placeholder-using-react-intl-">How to use <code>&lt;FormattedMessage&gt;</code> as placeholder using React Intl?</h3>
<p>The <code>&lt;Formatted... /&gt;</code> components from <code>react-intl</code> return elements, not plain text, so they can&#39;t be used for placeholders, alt text, etc. In that case, you should use lower level API <code>formatMessage()</code>. You can inject the <code>intl</code> object into your component using <code>injectIntl()</code> higher-order component and then format the message using <code>formatMessage()</code> available on that object.</p>
<p>```jsx harmony
import React from &quot;react&quot;;
import { injectIntl, intlShape } from &quot;react-intl&quot;;</p>
<p>const MyComponent = ({ intl }) =&gt; {
  const placeholder = intl.formatMessage({ id: &quot;messageId&quot; });
  return <input placeholder={placeholder} />;
};</p>
<p>MyComponent.propTypes = {
  intl: intlShape.isRequired,
};</p>
<p>export default injectIntl(MyComponent);
```</p>
</li>
</ol>




<ol>
<li><h3 id="how-to-access-current-locale-with-react-intl-">How to access current locale with React Intl?</h3>
<p>You can get the current locale in any component of your application using <code>injectIntl()</code>:</p>
<p>```jsx harmony
import { injectIntl, intlShape } from &quot;react-intl&quot;;</p>
<p>const MyComponent = ({ intl }) =&gt; (
  <div>{<code>The current locale is ${intl.locale}</code>}</div>
);</p>
<p>MyComponent.propTypes = {
  intl: intlShape.isRequired,
};</p>
<p>export default injectIntl(MyComponent);
```</p>
</li>
</ol>




<ol>
<li><h3 id="how-to-format-date-using-react-intl-">How to format date using React Intl?</h3>
<p>The <code>injectIntl()</code> higher-order component will give you access to the <code>formatDate()</code> method via the props in your component. The method is used internally by instances of <code>FormattedDate</code> and it returns the string representation of the formatted date.</p>
<p>```jsx harmony
import { injectIntl, intlShape } from &quot;react-intl&quot;;</p>
<p>const stringDate = this.props.intl.formatDate(date, {
  year: &quot;numeric&quot;,
  month: &quot;numeric&quot;,
  day: &quot;numeric&quot;,
});</p>
<p>const MyComponent = ({ intl }) =&gt; (
  <div>{<code>The formatted date is ${stringDate}</code>}</div>
);</p>
<p>MyComponent.propTypes = {
  intl: intlShape.isRequired,
};</p>
<p>export default injectIntl(MyComponent);
```</p>
</li>
</ol>
<h2 id="react-testing">React Testing</h2>




<ol>
<li><h3 id="what-is-shallow-renderer-in-react-testing-">What is Shallow Renderer in React testing?</h3>
<p><em>Shallow rendering</em> is useful for writing unit test cases in React. It lets you render a component <em>one level deep</em> and assert facts about what its render method returns, without worrying about the behavior of child components, which are not instantiated or rendered.</p>
<p>For example, if you have the following component:</p>
<pre><code class="lang-javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">MyComponent</span>(<span class="hljs-params"></span>) </span>{
  <span class="hljs-keyword">return</span> (
    <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">className</span>=<span class="hljs-string">{</span>"<span class="hljs-attr">heading</span>"}&gt;</span>{"Title"}<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">className</span>=<span class="hljs-string">{</span>"<span class="hljs-attr">description</span>"}&gt;</span>{"Description"}<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>
  );
}
</code></pre>
<p>Then you can assert as follows:</p>
<p>```jsx harmony
import ShallowRenderer from &quot;react-test-renderer/shallow&quot;;</p>
<p>// in your test
const renderer = new ShallowRenderer();
renderer.render(<MyComponent />);</p>
<p>const result = renderer.getRenderOutput();</p>
<p>expect(result.type).toBe(&quot;div&quot;);
expect(result.props.children).toEqual([
  <span className={"heading"}>{&quot;Title&quot;}</span>,
  <span className={"description"}>{&quot;Description&quot;}</span>,
]);
```</p>
</li>
</ol>




<ol>
<li><h3 id="what-is-testrenderer-package-in-react-">What is <code>TestRenderer</code> package in React?</h3>
<p>This package provides a renderer that can be used to render components to pure JavaScript objects, without depending on the DOM or a native mobile environment. This package makes it easy to grab a snapshot of the platform view hierarchy (similar to a DOM tree) rendered by a ReactDOM or React Native without using a browser or <code>jsdom</code>.</p>
<p>```jsx harmony
import TestRenderer from &quot;react-test-renderer&quot;;</p>
<p>const Link = ({ page, children }) =&gt; <a href={page}>{children}</a>;</p>
<p>const testRenderer = TestRenderer.create(
  <Link page={"https://www.facebook.com/"}>{&quot;Facebook&quot;}</Link>
);</p>
<p>console.log(testRenderer.toJSON());
// {
//   type: &#39;a&#39;,
//   props: { href: &#39;<a href="https://www.facebook.com/">https://www.facebook.com/</a>&#39; },
//   children: [ &#39;Facebook&#39; ]
// }
```</p>
</li>
</ol>




<ol>
<li><h3 id="what-is-the-purpose-of-reacttestutils-package-">What is the purpose of ReactTestUtils package?</h3>
<p><em>ReactTestUtils</em> are provided in the <code>with-addons</code> package and allow you to perform actions against a simulated DOM for the purpose of unit testing.</p>
</li>
</ol>




<ol>
<li><h3 id="what-is-jest-">What is Jest?</h3>
<p><em>Jest</em> is a JavaScript unit testing framework created by Facebook based on Jasmine and provides automated mock creation and a <code>jsdom</code> environment. It&#39;s often used for testing components.</p>
</li>
</ol>




<ol>
<li><h3 id="what-are-the-advantages-of-jest-over-jasmine-">What are the advantages of Jest over Jasmine?</h3>
<p>There are couple of advantages compared to Jasmine:</p>
<ul>
<li>Automatically finds tests to execute in your source code.</li>
<li>Automatically mocks dependencies when running your tests.</li>
<li>Allows you to test asynchronous code synchronously.</li>
<li>Runs your tests with a fake DOM implementation (via <code>jsdom</code>) so that your tests can be run on the command line.</li>
<li>Runs tests in parallel processes so that they finish sooner.</li>
</ul>
</li>
</ol>




<ol>
<li><h3 id="give-a-simple-example-of-jest-test-case">Give a simple example of Jest test case</h3>
<p>Let&#39;s write a test for a function that adds two numbers in <code>sum.js</code> file:</p>
<pre><code class="lang-javascript"><span class="hljs-keyword">const</span> sum = <span class="hljs-function">(<span class="hljs-params">a, b</span>) =&gt;</span> a + b;

<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> sum;
</code></pre>
<p>Create a file named <code>sum.test.js</code> which contains actual test:</p>
<pre><code class="lang-javascript">import sum from <span class="hljs-string">"./sum"</span><span class="hljs-comment">;</span>

test(<span class="hljs-string">"adds 1 + 2 to equal 3"</span>, () =&gt; {
  expect(<span class="hljs-name">sum</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>)).toBe(<span class="hljs-number">3</span>)<span class="hljs-comment">;</span>
})<span class="hljs-comment">;</span>
</code></pre>
<p>And then add the following section to your <code>package.json</code>:</p>
<pre><code class="lang-json">{
  <span class="hljs-attr">"scripts"</span>: {
    <span class="hljs-attr">"test"</span>: <span class="hljs-string">"jest"</span>
  }
}
</code></pre>
<p>Finally, run <code>yarn test</code> or <code>npm test</code> and Jest will print a result:</p>
<pre><code class="lang-console">$ yarn test
PASS ./sum.test.js
✓ adds <span class="hljs-number">1</span> + <span class="hljs-number">2</span> to equal <span class="hljs-number">3</span> (<span class="hljs-number">2</span>ms)
</code></pre>
</li>
</ol>
<h2 id="react-redux">React Redux</h2>




<ol>
<li><h3 id="what-is-flux-">What is flux?</h3>
<p><em>Flux</em> is an <em>application design paradigm</em> used as a replacement for the more traditional MVC pattern. It is not a framework or a library but a new kind of architecture that complements React and the concept of Unidirectional Data Flow. Facebook uses this pattern internally when working with React.</p>
<p>The workflow between dispatcher, stores and views components with distinct inputs and outputs as follows:</p>
<p><img src="images/flux.png" alt="flux"></p>
</li>
</ol>




<ol>
<li><h3 id="what-is-redux-">What is Redux?</h3>
<p><em>Redux</em> is a predictable state container for JavaScript apps based on the <em>Flux design pattern</em>. Redux can be used together with React, or with any other view library. It is tiny (about 2kB) and has no dependencies.</p>
</li>
</ol>




<ol>
<li><h3 id="what-are-the-core-principles-of-redux-">What are the core principles of Redux?</h3>
<p>Redux follows three fundamental principles:</p>
<ol>
<li><strong>Single source of truth:</strong> The state of your whole application is stored in an object tree within a single store. The single state tree makes it easier to keep track of changes over time and debug or inspect the application.</li>
<li><strong>State is read-only:</strong> The only way to change the state is to emit an action, an object describing what happened. This ensures that neither the views nor the network callbacks will ever write directly to the state.</li>
<li><strong>Changes are made with pure functions:</strong> To specify how the state tree is transformed by actions, you write reducers. Reducers are just pure functions that take the previous state and an action as parameters, and return the next state.</li>
</ol>
</li>
</ol>




<ol>
<li><h3 id="what-are-the-downsides-of-redux-compared-to-flux-">What are the downsides of Redux compared to Flux?</h3>
<p>Instead of saying downsides we can say that there are few compromises of using Redux over Flux. Those are as follows:</p>
<ol>
<li><strong>You will need to learn to avoid mutations:</strong> Flux is un-opinionated about mutating data, but Redux doesn&#39;t like mutations and many packages complementary to Redux assume you never mutate the state. You can enforce this with dev-only packages like <code>redux-immutable-state-invariant</code>, Immutable.js, or instructing your team to write non-mutating code.</li>
<li><strong>You&#39;re going to have to carefully pick your packages:</strong> While Flux explicitly doesn&#39;t try to solve problems such as undo/redo, persistence, or forms, Redux has extension points such as middleware and store enhancers, and it has spawned a rich ecosystem.</li>
<li><strong>There is no nice Flow integration yet:</strong> Flux currently lets you do very impressive static type checks which Redux doesn&#39;t support yet.</li>
</ol>
</li>
</ol>




<ol>
<li><h3 id="what-is-the-difference-between-mapstatetoprops-and-mapdispatchtoprops-">What is the difference between <code>mapStateToProps()</code> and <code>mapDispatchToProps()</code>?</h3>
<p><code>mapStateToProps()</code> is a utility which helps your component get updated state (which is updated by some other components):</p>
<pre><code class="lang-javascript">const mapStateToProps = (<span class="hljs-keyword">state</span>) =&gt; {
  return {
    todos: getVisibleTodos(<span class="hljs-keyword">state</span>.todos, <span class="hljs-keyword">state</span>.visibilityFilter),
  };
};
</code></pre>
<p><code>mapDispatchToProps()</code> is a utility which will help your component to fire an action event (dispatching action which may cause change of application state):</p>
<pre><code class="lang-javascript">const mapDispatchToProps = <span class="hljs-function"><span class="hljs-params">(dispatch)</span> =&gt;</span> {
  <span class="hljs-keyword">return</span> {
    onTodoClick: <span class="hljs-function"><span class="hljs-params">(id)</span> =&gt;</span> {
      dispatch(toggleTodo(id));
    },
  };
};
</code></pre>
<p>It is recommended to always use the “object shorthand” form for the <code>mapDispatchToProps</code>.</p>
<p>Redux wraps it in another function that looks like (…args) =&gt; dispatch(onTodoClick(…args)), and pass that wrapper function as a prop to your component.</p>
<pre><code class="lang-javascript"><span class="hljs-attribute">const mapDispatchToProps</span> = {
  onTodoClick,
};
</code></pre>
</li>
</ol>




<ol>
<li><h3 id="can-i-dispatch-an-action-in-reducer-">Can I dispatch an action in reducer?</h3>
<p>Dispatching an action within a reducer is an <strong>anti-pattern</strong>. Your reducer should be <em>without side effects</em>, simply digesting the action payload and returning a new state object. Adding listeners and dispatching actions within the reducer can lead to chained actions and other side effects.</p>
</li>
</ol>




<ol>
<li><h3 id="how-to-access-redux-store-outside-a-component-">How to access Redux store outside a component?</h3>
<p>You just need to export the store from the module where it created with <code>createStore()</code>. Also, it shouldn&#39;t pollute the global window object.</p>
<pre><code class="lang-javascript"><span class="hljs-attribute">store</span> = createStore(myReducer)<span class="hljs-comment">;</span>

export default store<span class="hljs-comment">;</span>
</code></pre>
</li>
</ol>




<ol>
<li><h3 id="what-are-the-drawbacks-of-mvw-pattern-">What are the drawbacks of MVW pattern?</h3>
<ol>
<li>DOM manipulation is very expensive which causes applications to behave slow and inefficient.</li>
<li>Due to circular dependencies, a complicated model was created around models and views.</li>
<li>Lot of data changes happens for collaborative applications(like Google Docs).</li>
<li>No way to do undo (travel back in time) easily without adding so much extra code.</li>
</ol>
</li>
</ol>




<ol>
<li><h3 id="are-there-any-similarities-between-redux-and-rxjs-">Are there any similarities between Redux and RxJS?</h3>
<p>These libraries are very different for very different purposes, but there are some vague similarities.</p>
<p>Redux is a tool for managing state throughout the application. It is usually used as an architecture for UIs. Think of it as an alternative to (half of) Angular. RxJS is a reactive programming library. It is usually used as a tool to accomplish asynchronous tasks in JavaScript. Think of it as an alternative to Promises. Redux uses the Reactive paradigm because the Store is reactive. The Store observes actions from a distance, and changes itself. RxJS also uses the Reactive paradigm, but instead of being an architecture, it gives you basic building blocks, Observables, to accomplish this pattern.</p>
</li>
</ol>




<ol>
<li><h3 id="how-to-dispatch-an-action-on-load-">How to dispatch an action on load?</h3>
<p>You can dispatch an action in <code>componentDidMount()</code> method and in <code>render()</code> method you can verify the data.</p>
<pre><code class="lang-javascript"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Component</span> </span>{
  componentDidMount() {
    <span class="hljs-keyword">this</span>.props.fetchData();
  }

  render() {
    <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.props.isLoaded ? (
      <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>{"Loaded"}<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>
    ) : (
      <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>{"Not Loaded"}<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>
    );
  }
}

<span class="hljs-keyword">const</span> mapStateToProps = <span class="hljs-function">(<span class="hljs-params">state</span>) =&gt;</span> ({
  <span class="hljs-attr">isLoaded</span>: state.isLoaded,
});

<span class="hljs-keyword">const</span> mapDispatchToProps = { fetchData };

<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> connect(mapStateToProps, mapDispatchToProps)(App);
</code></pre>
</li>
</ol>




<ol>
<li><h3 id="how-to-use-connect-from-react-redux-">How to use <code>connect()</code> from React Redux?</h3>
<p>You need to follow two steps to use your store in your container:</p>
<ol>
<li><strong>Use <code>mapStateToProps()</code>:</strong> It maps the state variables from your store to the props that you specify.</li>
<li><p><strong>Connect the above props to your container:</strong> The object returned by the <code>mapStateToProps</code> function is connected to the container. You can import <code>connect()</code> from <code>react-redux</code>.</p>
<p>```jsx harmony
import React from &quot;react&quot;;
import { connect } from &quot;react-redux&quot;;</p>
<p>class App extends React.Component {
  render() {</p>
<pre><code><span class="hljs-keyword">return</span> &lt;<span class="hljs-keyword">div</span>&gt;{<span class="hljs-keyword">this</span>.props.containerData}&lt;/<span class="hljs-keyword">div</span>&gt;;
</code></pre><p>  }
}</p>
<p>function mapStateToProps(state) {
  return { containerData: state.data };
}</p>
<p>export default connect(mapStateToProps)(App);
```</p>
</li>
</ol>
</li>
</ol>




<ol>
<li><h3 id="how-to-reset-state-in-redux-">How to reset state in Redux?</h3>
<p>You need to write a <em>root reducer</em> in your application which delegate handling the action to the reducer generated by <code>combineReducers()</code>.</p>
<p>For example, let us take <code>rootReducer()</code> to return the initial state after <code>USER_LOGOUT</code> action. As we know, reducers are supposed to return the initial state when they are called with <code>undefined</code> as the first argument, no matter the action.</p>
<pre><code class="lang-javascript">const appReducer = combineReducers({
  /* your app's top-level reducers */
});

const rootReducer = (<span class="hljs-keyword">state</span>, action) =&gt; {
  if (action.type === <span class="hljs-string">"USER_LOGOUT"</span>) {
    <span class="hljs-keyword">state</span> = undefined;
  }

  return appReducer(<span class="hljs-keyword">state</span>, action);
};
</code></pre>
<p>In case of using <code>redux-persist</code>, you may also need to clean your storage. <code>redux-persist</code> keeps a copy of your state in a storage engine. First, you need to import the appropriate storage engine and then, to parse the state before setting it to undefined and clean each storage state key.</p>
<pre><code class="lang-javascript">const appReducer = combineReducers({
  /* your app's top-level reducers */
});

const rootReducer = (<span class="hljs-keyword">state</span>, action) =&gt; {
  if (action.type === <span class="hljs-string">"USER_LOGOUT"</span>) {
    Object.keys(<span class="hljs-keyword">state</span>).<span class="hljs-keyword">for</span>Each((key) =&gt; {
      storage.removeItem(`persist:${key}`);
    });

    <span class="hljs-keyword">state</span> = undefined;
  }

  return appReducer(<span class="hljs-keyword">state</span>, action);
};
</code></pre>
</li>
</ol>




<ol>
<li><h3 id="whats-the-purpose-of-at-symbol-in-the-redux-connect-decorator-">Whats the purpose of <code>at</code> symbol in the Redux connect decorator?</h3>
<p>The <strong>@</strong> symbol is in fact a JavaScript expression used to signify decorators. <em>Decorators</em> make it possible to annotate and modify classes and properties at design time.</p>
<p>Let&#39;s take an example setting up Redux without and with a decorator.</p>
<ul>
<li><p><strong>Without decorator:</strong></p>
<pre><code class="lang-javascript"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">"react"</span>;
<span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> actionCreators <span class="hljs-keyword">from</span> <span class="hljs-string">"./actionCreators"</span>;
<span class="hljs-keyword">import</span> { bindActionCreators } <span class="hljs-keyword">from</span> <span class="hljs-string">"redux"</span>;
<span class="hljs-keyword">import</span> { connect } <span class="hljs-keyword">from</span> <span class="hljs-string">"react-redux"</span>;

<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">mapStateToProps</span>(<span class="hljs-params">state</span>) </span>{
  <span class="hljs-keyword">return</span> { <span class="hljs-attr">todos</span>: state.todos };
}

<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">mapDispatchToProps</span>(<span class="hljs-params">dispatch</span>) </span>{
  <span class="hljs-keyword">return</span> { <span class="hljs-attr">actions</span>: bindActionCreators(actionCreators, dispatch) };
}

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyApp</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span> </span>{
  <span class="hljs-comment">// ...define your main app here</span>
}

<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> connect(mapStateToProps, mapDispatchToProps)(MyApp);
</code></pre>
</li>
<li><p><strong>With decorator:</strong></p>
<pre><code class="lang-javascript"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">"react"</span>;
<span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> actionCreators <span class="hljs-keyword">from</span> <span class="hljs-string">"./actionCreators"</span>;
<span class="hljs-keyword">import</span> { bindActionCreators } <span class="hljs-keyword">from</span> <span class="hljs-string">"redux"</span>;
<span class="hljs-keyword">import</span> { connect } <span class="hljs-keyword">from</span> <span class="hljs-string">"react-redux"</span>;

<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">mapStateToProps</span>(<span class="hljs-params">state</span>) </span>{
  <span class="hljs-keyword">return</span> { <span class="hljs-attr">todos</span>: state.todos };
}

<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">mapDispatchToProps</span>(<span class="hljs-params">dispatch</span>) </span>{
  <span class="hljs-keyword">return</span> { <span class="hljs-attr">actions</span>: bindActionCreators(actionCreators, dispatch) };
}

@connect(mapStateToProps, mapDispatchToProps)
<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyApp</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span> </span>{
  <span class="hljs-comment">// ...define your main app here</span>
}
</code></pre>
</li>
</ul>
<p>The above examples are almost similar except the usage of decorator. The decorator syntax isn&#39;t built into any JavaScript runtimes yet, and is still experimental and subject to change. You can use babel for the decorators support.</p>
</li>
</ol>




<ol>
<li><h3 id="what-is-the-difference-between-react-context-and-react-redux-">What is the difference between React context and React Redux?</h3>
<p>You can use <strong>Context</strong> in your application directly and is going to be great for passing down data to deeply nested components which what it was designed for.</p>
<p>Whereas <strong>Redux</strong> is much more powerful and provides a large number of features that the Context API doesn&#39;t provide. Also, React Redux uses context internally but it doesn&#39;t expose this fact in the public API.</p>
</li>
</ol>




<ol>
<li><h3 id="why-are-redux-state-functions-called-reducers-">Why are Redux state functions called reducers?</h3>
<p>Reducers always return the accumulation of the state (based on all previous and current actions). Therefore, they act as a reducer of state. Each time a Redux reducer is called, the state and action are passed as parameters. This state is then reduced (or accumulated) based on the action, and then the next state is returned. You could <em>reduce</em> a collection of actions and an initial state (of the store) on which to perform these actions to get the resulting final state.</p>
</li>
</ol>




<ol>
<li><h3 id="how-to-make-ajax-request-in-redux-">How to make AJAX request in Redux?</h3>
<p>You can use <code>redux-thunk</code> middleware which allows you to define async actions.</p>
<p>Let&#39;s take an example of fetching specific account as an AJAX call using <em>fetch API</em>:</p>
<pre><code class="lang-javascript"><span class="hljs-keyword">export</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fetchAccount</span>(<span class="hljs-params">id</span>) </span>{
  <span class="hljs-keyword">return</span> <span class="hljs-function">(<span class="hljs-params">dispatch</span>) =&gt;</span> {
    dispatch(setLoadingAccountState()); <span class="hljs-comment">// Show a loading spinner</span>
    fetch(<span class="hljs-string">`/account/<span class="hljs-subst">${id}</span>`</span>, (response) =&gt; {
      dispatch(doneFetchingAccount()); <span class="hljs-comment">// Hide loading spinner</span>
      <span class="hljs-keyword">if</span> (response.status === <span class="hljs-number">200</span>) {
        dispatch(setAccount(response.json)); <span class="hljs-comment">// Use a normal function to set the received state</span>
      } <span class="hljs-keyword">else</span> {
        dispatch(someError);
      }
    });
  };
}

<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">setAccount</span>(<span class="hljs-params">data</span>) </span>{
  <span class="hljs-keyword">return</span> { <span class="hljs-attr">type</span>: <span class="hljs-string">"SET_Account"</span>, <span class="hljs-attr">data</span>: data };
}
</code></pre>
</li>
</ol>




<ol>
<li><h3 id="should-i-keep-all-component-s-state-in-redux-store-">Should I keep all component&#39;s state in Redux store?</h3>
<p>Keep your data in the Redux store, and the UI related state internally in the component.</p>
</li>
</ol>




<ol>
<li><h3 id="what-is-the-proper-way-to-access-redux-store-">What is the proper way to access Redux store?</h3>
<p>The best way to access your store in a component is to use the <code>connect()</code> function, that creates a new component that wraps around your existing one. This pattern is called <em>Higher-Order Components</em>, and is generally the preferred way of extending a component&#39;s functionality in React. This allows you to map state and action creators to your component, and have them passed in automatically as your store updates.</p>
<p>Let&#39;s take an example of <code>&lt;FilterLink&gt;</code> component using connect:</p>
<pre><code class="lang-javascript"><span class="hljs-keyword">import</span> { connect } <span class="hljs-keyword">from</span> <span class="hljs-string">"react-redux"</span>;
<span class="hljs-keyword">import</span> { setVisibilityFilter } <span class="hljs-keyword">from</span> <span class="hljs-string">"../actions"</span>;
<span class="hljs-keyword">import</span> Link <span class="hljs-keyword">from</span> <span class="hljs-string">"../components/Link"</span>;

<span class="hljs-keyword">const</span> mapStateToProps = <span class="hljs-function">(<span class="hljs-params">state, ownProps</span>) =&gt;</span> ({
  <span class="hljs-attr">active</span>: ownProps.filter === state.visibilityFilter,
});

<span class="hljs-keyword">const</span> mapDispatchToProps = <span class="hljs-function">(<span class="hljs-params">dispatch, ownProps</span>) =&gt;</span> ({
  <span class="hljs-attr">onClick</span>: <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> dispatch(setVisibilityFilter(ownProps.filter)),
});

<span class="hljs-keyword">const</span> FilterLink = connect(mapStateToProps, mapDispatchToProps)(Link);

<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> FilterLink;
</code></pre>
<p>Due to it having quite a few performance optimizations and generally being less likely to cause bugs, the Redux developers almost always recommend using <code>connect()</code> over accessing the store directly (using context API).</p>
<pre><code class="lang-javascript"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyComponent</span> </span>{
  someMethod() {
    doSomethingWith(<span class="hljs-keyword">this</span>.context.store);
  }
}
</code></pre>
</li>
</ol>




<ol>
<li><h3 id="what-is-the-difference-between-component-and-container-in-react-redux-">What is the difference between component and container in React Redux?</h3>
<p><strong>Component</strong> is a class or function component that describes the presentational part of your application.</p>
<p><strong>Container</strong> is an informal term for a component that is connected to a Redux store. Containers <em>subscribe</em> to Redux state updates and <em>dispatch</em> actions, and they usually don&#39;t render DOM elements; they delegate rendering to presentational child components.</p>
</li>
</ol>




<ol>
<li><h3 id="what-is-the-purpose-of-the-constants-in-redux-">What is the purpose of the constants in Redux?</h3>
<p>Constants allows you to easily find all usages of that specific functionality across the project when you use an IDE. It also prevents you from introducing silly bugs caused by typos – in which case, you will get a <code>ReferenceError</code> immediately.</p>
<p>Normally we will save them in a single file (<code>constants.js</code> or <code>actionTypes.js</code>).</p>
<pre><code class="lang-javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> ADD_TODO = <span class="hljs-string">"ADD_TODO"</span>;
<span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> DELETE_TODO = <span class="hljs-string">"DELETE_TODO"</span>;
<span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> EDIT_TODO = <span class="hljs-string">"EDIT_TODO"</span>;
<span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> COMPLETE_TODO = <span class="hljs-string">"COMPLETE_TODO"</span>;
<span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> COMPLETE_ALL = <span class="hljs-string">"COMPLETE_ALL"</span>;
<span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-built_in">CLEAR_COMPLETED</span> = <span class="hljs-string">"CLEAR_COMPLETED"</span>;
</code></pre>
<p>In Redux, you use them in two places:</p>
<ol>
<li><p><strong>During action creation:</strong></p>
<p>Let&#39;s take <code>actions.js</code>:</p>
<pre><code class="lang-javascript"><span class="hljs-keyword">import</span> { ADD_TODO } <span class="hljs-keyword">from</span> <span class="hljs-string">"./actionTypes"</span>;

<span class="hljs-keyword">export</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">addTodo</span>(<span class="hljs-params">text</span>) </span>{
  <span class="hljs-keyword">return</span> { <span class="hljs-attr">type</span>: ADD_TODO, text };
}
</code></pre>
</li>
<li><p><strong>In reducers:</strong></p>
<p>Let&#39;s create <code>reducer.js</code>:</p>
<pre><code class="lang-javascript">import { ADD_TODO } <span class="hljs-keyword">from</span> <span class="hljs-string">"./actionTypes"</span>;

export <span class="hljs-keyword">default</span> (<span class="hljs-keyword">state</span> = [], action) =&gt; {
  switch (action.type) {
    case ADD_TODO:
      return [
        ...<span class="hljs-keyword">state</span>,
        {
          text: action.text,
          completed: false,
        },
      ];
    <span class="hljs-keyword">default</span>:
      return <span class="hljs-keyword">state</span>;
  }
};
</code></pre>
</li>
</ol>
</li>
</ol>




<ol>
<li><h3 id="what-are-the-different-ways-to-write-mapdispatchtoprops-">What are the different ways to write <code>mapDispatchToProps()</code>?</h3>
<p>There are a few ways of binding <em>action creators</em> to <code>dispatch()</code> in <code>mapDispatchToProps()</code>.</p>
<p>Below are the possible options:</p>
<pre><code class="lang-javascript">const mapDispatchToProps = (<span class="hljs-name">dispatch</span>) =&gt; ({
  action: () =&gt; dispatch(<span class="hljs-name">action</span>()),
})<span class="hljs-comment">;</span>
</code></pre>
<pre><code class="lang-javascript">const mapDispatchToProps = (<span class="hljs-name">dispatch</span>) =&gt; ({
  action: bindActionCreators(<span class="hljs-name">action</span>, dispatch),
})<span class="hljs-comment">;</span>
</code></pre>
<pre><code class="lang-javascript"><span class="hljs-attribute">const mapDispatchToProps</span> = { action };
</code></pre>
<p>The third option is just a shorthand for the first one.</p>
</li>
</ol>




<ol>
<li><h3 id="what-is-the-use-of-the-ownprops-parameter-in-mapstatetoprops-and-mapdispatchtoprops-">What is the use of the <code>ownProps</code> parameter in <code>mapStateToProps()</code> and <code>mapDispatchToProps()</code>?</h3>
<p>If the <code>ownProps</code> parameter is specified, React Redux will pass the props that were passed to the component into your <em>connect</em> functions. So, if you use a connected component:</p>
<p>```jsx harmony
import ConnectedComponent from &quot;./containers/ConnectedComponent&quot;;</p>
<p><ConnectedComponent user={"john"} />;</p>
<pre><code>
The `ownProps` inside your `mapStateToProps()` and `mapDispatchToProps()` functions will be an object:

```javascript
{
  user: <span class="hljs-string">"john"</span>;
}
</code></pre><p>You can use this object to decide what to return from those functions.</p>
</li>
</ol>




<ol>
<li><h3 id="how-to-structure-redux-top-level-directories-">How to structure Redux top level directories?</h3>
<p>Most of the applications has several top-level directories as below:</p>
<ol>
<li><strong>Components</strong>: Used for <em>dumb</em> components unaware of Redux.</li>
<li><strong>Containers</strong>: Used for <em>smart</em> components connected to Redux.</li>
<li><strong>Actions</strong>: Used for all action creators, where file names correspond to part of the app.</li>
<li><strong>Reducers</strong>: Used for all reducers, where files name correspond to state key.</li>
<li><strong>Store</strong>: Used for store initialization.</li>
</ol>
<p>This structure works well for small and medium size apps.</p>
</li>
</ol>




<ol>
<li><h3 id="what-is-redux-saga-">What is redux-saga?</h3>
<p><code>redux-saga</code> is a library that aims to make side effects (asynchronous things like data fetching and impure things like accessing the browser cache) in React/Redux applications easier and better.</p>
<p>It is available in NPM:</p>
<pre><code class="lang-console">$ npm <span class="hljs-keyword">install</span> <span class="hljs-comment">--save redux-saga</span>
</code></pre>
</li>
</ol>




<ol>
<li><h3 id="what-is-the-mental-model-of-redux-saga-">What is the mental model of redux-saga?</h3>
<p><em>Saga</em> is like a separate thread in your application, that&#39;s solely responsible for side effects. <code>redux-saga</code> is a redux <em>middleware</em>, which means this thread can be started, paused and cancelled from the main application with normal Redux actions, it has access to the full Redux application state and it can dispatch Redux actions as well.</p>
</li>
</ol>




<ol>
<li><h3 id="what-are-the-differences-between-call-and-put-in-redux-saga-">What are the differences between <code>call()</code> and <code>put()</code> in redux-saga?</h3>
<p>Both <code>call()</code> and <code>put()</code> are effect creator functions. <code>call()</code> function is used to create effect description, which instructs middleware to call the promise. <code>put()</code> function creates an effect, which instructs middleware to dispatch an action to the store.</p>
<p>Let&#39;s take example of how these effects work for fetching particular user data.</p>
<pre><code class="lang-javascript"><span class="hljs-function"><span class="hljs-keyword">function</span></span>* fetchUserSaga(<span class="hljs-keyword">action</span>) {
  // `<span class="hljs-keyword">call</span>` <span class="hljs-function"><span class="hljs-keyword">function</span></span> accepts rest arguments, which will be passed to `api.fetchUser` <span class="hljs-function"><span class="hljs-keyword">function</span>.</span>
  // Instructing middleware to <span class="hljs-keyword">call</span> promise, it resolved <span class="hljs-keyword">value</span> will be assigned to `userData` variable
  const userData = yield <span class="hljs-keyword">call</span>(api.fetchUser, <span class="hljs-keyword">action</span>.userId);

  // Instructing middleware to dispatch corresponding <span class="hljs-keyword">action</span>.
  yield put({
    <span class="hljs-keyword">type</span>: <span class="hljs-string">"FETCH_USER_SUCCESS"</span>,
    userData,
  });
}
</code></pre>
</li>
</ol>




<ol>
<li><h3 id="what-is-redux-thunk-">What is Redux Thunk?</h3>
<p><em>Redux Thunk</em> middleware allows you to write action creators that return a function instead of an action. The thunk can be used to delay the dispatch of an action, or to dispatch only if a certain condition is met. The inner function receives the store methods <code>dispatch()</code> and <code>getState()</code> as parameters.</p>
</li>
</ol>




<ol>
<li><h3 id="what-are-the-differences-between-redux-saga-and-redux-thunk-">What are the differences between <code>redux-saga</code> and <code>redux-thunk</code>?</h3>
<p>Both <em>Redux Thunk</em> and <em>Redux Saga</em> take care of dealing with side effects. In most of the scenarios, Thunk uses <em>Promises</em> to deal with them, whereas Saga uses <em>Generators</em>. Thunk is simple to use and Promises are familiar to many developers, Sagas/Generators are more powerful but you will need to learn them. But both middleware can coexist, so you can start with Thunks and introduce Sagas when/if you need them.</p>
</li>
</ol>




<ol>
<li><h3 id="what-is-redux-devtools-">What is Redux DevTools?</h3>
<p><em>Redux DevTools</em> is a live-editing time travel environment for Redux with hot reloading, action replay, and customizable UI. If you don&#39;t want to bother with installing Redux DevTools and integrating it into your project, consider using Redux DevTools Extension for Chrome and Firefox.</p>
</li>
</ol>




<ol>
<li><h3 id="what-are-the-features-of-redux-devtools-">What are the features of Redux DevTools?</h3>
<p>Some of the main features of Redux DevTools are below,</p>
<ol>
<li>Lets you inspect every state and action payload.</li>
<li>Lets you go back in time by <em>cancelling</em> actions.</li>
<li>If you change the reducer code, each <em>staged</em> action will be re-evaluated.</li>
<li>If the reducers throw, you will see during which action this happened, and what the error was.</li>
<li>With <code>persistState()</code> store enhancer, you can persist debug sessions across page reloads.</li>
</ol>
</li>
</ol>




<ol>
<li><h3 id="what-are-redux-selectors-and-why-to-use-them-">What are Redux selectors and why to use them?</h3>
<p><em>Selectors</em> are functions that take Redux state as an argument and return some data to pass to the component.</p>
<p>For example, to get user details from the state:</p>
<pre><code class="lang-javascript">const getUserData = (<span class="hljs-keyword">state</span>) =&gt; <span class="hljs-keyword">state</span>.<span class="hljs-keyword">user</span>.data;
</code></pre>
<p>These selectors have two main benefits,</p>
<ol>
<li>The selector can compute derived data, allowing Redux to store the minimal possible state</li>
<li>The selector is not recomputed unless one of its arguments changes</li>
</ol>
</li>
</ol>




<ol>
<li><h3 id="what-is-redux-form-">What is Redux Form?</h3>
<p><em>Redux Form</em> works with React and Redux to enable a form in React to use Redux to store all of its state. Redux Form can be used with raw HTML5 inputs, but it also works very well with common UI frameworks like Material UI, React Widgets and React Bootstrap.</p>
</li>
</ol>




<ol>
<li><h3 id="what-are-the-main-features-of-redux-form-">What are the main features of Redux Form?</h3>
<p>Some of the main features of Redux Form are:</p>
<ol>
<li>Field values persistence via Redux store.</li>
<li>Validation (sync/async) and submission.</li>
<li>Formatting, parsing and normalization of field values.</li>
</ol>
</li>
</ol>




<ol>
<li><h3 id="how-to-add-multiple-middlewares-to-redux-">How to add multiple middlewares to Redux?</h3>
<p>You can use <code>applyMiddleware()</code>.</p>
<p>For example, you can add <code>redux-thunk</code> and <code>logger</code> passing them as arguments to <code>applyMiddleware()</code>:</p>
<pre><code class="lang-javascript"><span class="hljs-keyword">import</span> { createStore, applyMiddleware } <span class="hljs-keyword">from</span> <span class="hljs-string">"redux"</span>;
<span class="hljs-keyword">const</span> createStoreWithMiddleware = applyMiddleware(
  ReduxThunk,
  logger
)(createStore);
</code></pre>
</li>
</ol>




<ol>
<li><h3 id="how-to-set-initial-state-in-redux-">How to set initial state in Redux?</h3>
<p>You need to pass initial state as second argument to createStore:</p>
<pre><code class="lang-javascript"><span class="hljs-attribute">const rootReducer</span> = combineReducers({
  todos: todos,
  visibilityFilter: visibilityFilter,
});

<span class="hljs-attribute">const initialState</span> = {
  todos: [{ id: 123, name: <span class="hljs-string">"example"</span>, completed: false }],
};

<span class="hljs-attribute">const store</span> = createStore(rootReducer, initialState);
</code></pre>
</li>
</ol>




<ol>
<li><h3 id="how-relay-is-different-from-redux-">How Relay is different from Redux?</h3>
<p>Relay is similar to Redux in that they both use a single store. The main difference is that relay only manages state originated from the server, and all access to the state is used via <em>GraphQL</em> queries (for reading data) and mutations (for changing data). Relay caches the data for you and optimizes data fetching for you, by fetching only changed data and nothing more.</p>
</li>
<li><h3 id="what-is-an-action-in-redux-">What is an action in Redux?</h3>
<p><em>Actions</em> are plain JavaScript objects or payloads of information that send data from your application to your store. They are the only source of information for the store. Actions must have a type property that indicates the type of action being performed.</p>
<p>For example, let&#39;s take an action which represents adding a new todo item:</p>
<pre><code>{
  <span class="hljs-attribute">type</span>: ADD_TODO,
  text: <span class="hljs-string">'Add todo item'</span>
}
</code></pre></li>
</ol>




<h2 id="react-native">React Native</h2>




<ol>
<li><h3 id="what-is-the-difference-between-react-native-and-react-">What is the difference between React Native and React?</h3>
<p><strong>React</strong> is a JavaScript library, supporting both front end web and being run on the server, for building user interfaces and web applications.</p>
<p><strong>React Native</strong> is a mobile framework that compiles to native app components, allowing you to build native mobile applications (iOS, Android, and Windows) in JavaScript that allows you to use React to build your components, and implements React under the hood.</p>
</li>
</ol>




<ol>
<li><h3 id="how-to-test-react-native-apps-">How to test React Native apps?</h3>
<p>React Native can be tested only in mobile simulators like iOS and Android. You can run the app in your mobile using expo app (<a href="https://expo.io">https://expo.io</a>) Where it syncs using QR code, your mobile and computer should be in same wireless network.</p>
</li>
</ol>




<ol>
<li><h3 id="how-to-do-logging-in-react-native-">How to do logging in React Native?</h3>
<p>You can use <code>console.log</code>, <code>console.warn</code>, etc. As of React Native v0.29 you can simply run the following to see logs in the console:</p>
<pre><code><span class="hljs-symbol">$</span> react-native <span class="hljs-built-in">log</span>-ios
<span class="hljs-symbol">$</span> react-native <span class="hljs-built-in">log</span>-android
</code></pre></li>
</ol>




<ol>
<li><h3 id="how-to-debug-your-react-native-">How to debug your React Native?</h3>
<p>Follow the below steps to debug React Native app:</p>
<ol>
<li>Run your application in the iOS simulator.</li>
<li>Press <code>Command + D</code> and a webpage should open up at <code>http://localhost:8081/debugger-ui</code>.</li>
<li>Enable <em>Pause On Caught Exceptions</em> for a better debugging experience.</li>
<li>Press <code>Command + Option + I</code> to open the Chrome Developer tools, or open it via <code>View</code> -&gt; <code>Developer</code> -&gt; <code>Developer Tools</code>.</li>
<li>You should now be able to debug as you normally would.</li>
</ol>
</li>
</ol>
<h2 id="react-supported-libraries-integration">React supported libraries &amp; Integration</h2>




<ol>
<li><h3 id="what-is-reselect-and-how-it-works-">What is reselect and how it works?</h3>
<p><em>Reselect</em> is a <strong>selector library</strong> (for Redux) which uses <em>memoization</em> concept. It was originally written to compute derived data from Redux-like applications state, but it can&#39;t be tied to any architecture or library.</p>
<p>Reselect keeps a copy of the last inputs/outputs of the last call, and recomputes the result only if one of the inputs changes. If the the same inputs are provided twice in a row, Reselect returns the cached output. It&#39;s memoization and cache are fully customizable.</p>
</li>
</ol>




<ol>
<li><h3 id="what-is-flow-">What is Flow?</h3>
<p><em>Flow</em> is a <em>static type checker</em> designed to find type errors in JavaScript. Flow types can express much more fine-grained distinctions than traditional type systems. For example, Flow helps you catch errors involving <code>null</code>, unlike most type systems.</p>
</li>
</ol>




<ol>
<li><h3 id="what-is-the-difference-between-flow-and-proptypes-">What is the difference between Flow and PropTypes?</h3>
<p>Flow is a <em>static analysis tool</em> (static checker) which uses a superset of the language, allowing you to add type annotations to all of your code and catch an entire class of bugs at compile time.</p>
<p>PropTypes is a <em>basic type checker</em> (runtime checker) which has been patched onto React. It can&#39;t check anything other than the types of the props being passed to a given component. If you want more flexible typechecking for your entire project Flow/TypeScript are appropriate choices.</p>
</li>
</ol>




<ol>
<li><h3 id="how-to-use-font-awesome-icons-in-react-">How to use Font Awesome icons in React?</h3>
<p>The below steps followed to include Font Awesome in React:</p>
<ol>
<li><p>Install <code>font-awesome</code>:</p>
<pre><code class="lang-console">$ npm install --<span class="hljs-built_in">save</span> <span class="hljs-built_in">font</span>-awesome
</code></pre>
</li>
<li><p>Import <code>font-awesome</code> in your <code>index.js</code> file:</p>
<pre><code class="lang-javascript"><span class="hljs-keyword">import</span> <span class="hljs-string">"font-awesome/css/font-awesome.min.css"</span>;
</code></pre>
</li>
<li><p>Add Font Awesome classes in <code>className</code>:</p>
<pre><code class="lang-javascript"><span class="hljs-function"><span class="hljs-title">render</span><span class="hljs-params">()</span></span> {
  return &lt;div&gt;&lt;<span class="hljs-selector-tag">i</span> className={<span class="hljs-string">'fa fa-spinner'</span>} /&gt;&lt;/div&gt;
}
</code></pre>
</li>
</ol>
</li>
</ol>




<ol>
<li><h3 id="what-is-react-dev-tools-">What is React Dev Tools?</h3>
<p><em>React Developer Tools</em> let you inspect the component hierarchy, including component props and state. It exists both as a browser extension (for Chrome and Firefox), and as a standalone app (works with other environments including Safari, IE, and React Native).</p>
<p>The official extensions available for different browsers or environments.</p>
<ol>
<li><strong>Chrome extension</strong></li>
<li><strong>Firefox extension</strong></li>
<li><strong>Standalone app</strong> (Safari, React Native, etc)</li>
</ol>
</li>
</ol>




<ol>
<li><h3 id="why-is-devtools-not-loading-in-chrome-for-local-files-">Why is DevTools not loading in Chrome for local files?</h3>
<p>If you opened a local HTML file in your browser (<code>file://...</code>) then you must first open <em>Chrome Extensions</em> and check <code>Allow access to file URLs</code>.</p>
</li>
</ol>




<ol>
<li><h3 id="how-to-use-polymer-in-react-">How to use Polymer in React?</h3>
<p>You need to follow below steps to use Polymer in React,</p>
<ol>
<li><p>Create a Polymer element:</p>
<p>```jsx harmony
<link
  rel="import"
  href="../../bower_components/polymer/polymer.html"
/>;
Polymer({
  is: &quot;calendar-element&quot;,
  ready: function () {</p>
<pre><code><span class="hljs-keyword">this</span>.textContent = <span class="hljs-string">"I am a calendar"</span>;
</code></pre><p>  },
});
```</p>
</li>
<li><p>Create the Polymer component HTML tag by importing it in a HTML document, e.g. import it in the <code>index.html</code> of your React application:</p>
<pre><code class="lang-html"><span class="hljs-tag">&lt;<span class="hljs-name">link</span>
  <span class="hljs-attr">rel</span>=<span class="hljs-string">"import"</span>
  <span class="hljs-attr">href</span>=<span class="hljs-string">"./src/polymer-components/calendar-element.html"</span>
/&gt;</span>
</code></pre>
</li>
<li><p>Use that element in the JSX file:</p>
<pre><code class="lang-javascript"><span class="hljs-keyword">import</span> <span class="hljs-type">React</span> from <span class="hljs-string">"react"</span>;

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyComponent</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span> </span>{
  render() {
    <span class="hljs-keyword">return</span> &lt;calendar-element /&gt;;
  }
}

export <span class="hljs-keyword">default</span> <span class="hljs-type">MyComponent</span>;
</code></pre>
</li>
</ol>
</li>
</ol>




<ol>
<li><h3 id="what-are-the-advantages-of-react-over-vue-js-">What are the advantages of React over Vue.js?</h3>
<p>React has the following advantages over Vue.js:</p>
<ol>
<li>Gives more flexibility in large apps developing.</li>
<li>Easier to test.</li>
<li>Suitable for mobile apps creating.</li>
<li>More information and solutions available.</li>
</ol>
</li>
</ol>
<p><strong>Note:</strong> The above list of advantages are purely opinionated and it vary based on the professional experience. But they are helpful as base parameters.</p>




<ol>
<li><h3 id="what-is-the-difference-between-react-and-angular-">What is the difference between React and Angular?</h3>
<p>Let&#39;s see the difference between React and Angular in a table format.</p>
<p>| React                                                                                       | Angular                                                                                                                            |
| ------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------------------------------------------------------- |
| React is a library and has only the View layer                                              | Angular is a framework and has complete MVC functionality                                                                          |
| React handles rendering on the server side                                                  | AngularJS renders only on the client side but Angular 2 and above renders on the server side                                       |
| React uses JSX that looks like HTML in JS which can be confusing                            | Angular follows the template approach for HTML, which makes code shorter and easy to understand                                    |
| React Native, which is a React type to build mobile applications are faster and more stable | Ionic, Angular&#39;s mobile native app is relatively less stable and slower                                                            |
| In React, data flows only in one way and hence debugging is easy                            | In Angular, data flows both way i.e it has two-way data binding between children and parent and hence debugging is often difficult |</p>
</li>
</ol>
<p><strong>Note:</strong> The above list of differences are purely opinionated and it vary based on the professional experience. But they are helpful as base parameters.</p>




<ol>
<li><h3 id="why-react-tab-is-not-showing-up-in-devtools-">Why React tab is not showing up in DevTools?</h3>
<p>When the page loads, <em>React DevTools</em> sets a global named <code>__REACT_DEVTOOLS_GLOBAL_HOOK__</code>, then React communicates with that hook during initialization. If the website is not using React or if React fails to communicate with DevTools then it won&#39;t show up the tab.</p>
</li>
</ol>




<ol>
<li><h3 id="what-are-styled-components-">What are Styled Components?</h3>
<p><code>styled-components</code> is a JavaScript library for styling React applications. It removes the mapping between styles and components, and lets you write actual CSS augmented with JavaScript.</p>
</li>
</ol>




<ol>
<li><h3 id="give-an-example-of-styled-components-">Give an example of Styled Components?</h3>
<p>Lets create <code>&lt;Title&gt;</code> and <code>&lt;Wrapper&gt;</code> components with specific styles for each.</p>
<pre><code class="lang-javascript"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">"react"</span>;
<span class="hljs-keyword">import</span> styled <span class="hljs-keyword">from</span> <span class="hljs-string">"styled-components"</span>;

<span class="hljs-comment">// Create a &lt;Title&gt; component that renders an &lt;h1&gt; which is centered, red and sized at 1.5em</span>
const Title = styled.h1`
  font-size: <span class="hljs-number">1.5</span>em;
  text-align: center;
  color: palevioletred;
`;

<span class="hljs-comment">// Create a &lt;Wrapper&gt; component that renders a &lt;section&gt; with some padding and a papayawhip background</span>
const Wrapper = styled.section`
  padding: <span class="hljs-number">4</span>em;
  background: papayawhip;
`;
</code></pre>
<p>These two variables, <code>Title</code> and <code>Wrapper</code>, are now components that you can render just like any other react component.</p>
<p><code>jsx harmony
&lt;Wrapper&gt;
  &lt;Title&gt;{&quot;Lets start first styled component!&quot;}&lt;/Title&gt;
&lt;/Wrapper&gt;</code></p>
</li>
</ol>




<ol>
<li><h3 id="what-is-relay-">What is Relay?</h3>
<p>Relay is a JavaScript framework for providing a data layer and client-server communication to web applications using the React view layer.</p>
</li>
</ol>




<ol>
<li><h3 id="how-to-use-typescript-in-create-react-app-application-">How to use TypeScript in <code>create-react-app</code> application?</h3>
<p>Starting from react-scripts@2.1.0 or higher, there is a built-in support for typescript. i.e, <code>create-react-app</code> now supports typescript natively. You can just pass <code>--typescript</code> option as below</p>
<pre><code class="lang-bash"><span class="hljs-string">npx </span><span class="hljs-built_in">create-react-app</span> <span class="hljs-string">my-app </span><span class="hljs-built_in">--typescript</span>

<span class="hljs-comment"># or</span>

<span class="hljs-string">yarn </span><span class="hljs-string">create </span><span class="hljs-string">react-app </span><span class="hljs-string">my-app </span><span class="hljs-built_in">--typescript</span>
</code></pre>
<p>But for lower versions of react scripts, just supply <code>--scripts-version</code> option as <code>react-scripts-ts</code> while you create a new project. <code>react-scripts-ts</code> is a set of adjustments to take the standard <code>create-react-app</code> project pipeline and bring TypeScript into the mix.</p>
<p>Now the project layout should look like the following:</p>
<pre><code>my-app/
├─ <span class="hljs-selector-class">.gitignore</span>
├─ images<span class="hljs-selector-class">.d</span><span class="hljs-selector-class">.ts</span>
├─ node_modules/
├─ public/
├─ src/
│  └─ ...
├─ package<span class="hljs-selector-class">.json</span>
├─ tsconfig<span class="hljs-selector-class">.json</span>
├─ tsconfig<span class="hljs-selector-class">.prod</span><span class="hljs-selector-class">.json</span>
├─ tsconfig<span class="hljs-selector-class">.test</span><span class="hljs-selector-class">.json</span>
└─ tslint.json
</code></pre></li>
</ol>
<h2 id="miscellaneous">Miscellaneous</h2>




<ol>
<li><h3 id="what-are-the-main-features-of-reselect-library-">What are the main features of Reselect library?</h3>
<p>Let&#39;s see the main features of Reselect library,</p>
<ol>
<li>Selectors can compute derived data, allowing Redux to store the minimal possible state.</li>
<li>Selectors are efficient. A selector is not recomputed unless one of its arguments changes.</li>
<li>Selectors are composable. They can be used as input to other selectors.</li>
</ol>
</li>
<li><h4 id="give-an-example-of-reselect-usage-">Give an example of Reselect usage?</h4>
<p>Let&#39;s take calculations and different amounts of a shipment order with the simplified usage of Reselect:</p>
<pre><code class="lang-javascript">import { createSelector } <span class="hljs-keyword">from</span> <span class="hljs-string">"reselect"</span>;

const shopItemsSelector = (<span class="hljs-keyword">state</span>) =&gt; <span class="hljs-keyword">state</span>.shop.items;
const taxPercentSelector = (<span class="hljs-keyword">state</span>) =&gt; <span class="hljs-keyword">state</span>.shop.taxPercent;

const subtotalSelector = createSelector(shopItemsSelector, (items) =&gt;
  items.reduce((acc, item) =&gt; acc + item.value, <span class="hljs-number">0</span>)
);

const taxSelector = createSelector(
  subtotalSelector,
  taxPercentSelector,
  (subtotal, taxPercent) =&gt; subtotal * (taxPercent / <span class="hljs-number">100</span>)
);

export const totalSelector = createSelector(
  subtotalSelector,
  taxSelector,
  (subtotal, tax) =&gt; ({ total: subtotal + tax })
);

let exampleState = {
  shop: {
    taxPercent: <span class="hljs-number">8</span>,
    items: [
      { name: <span class="hljs-string">"apple"</span>, value: <span class="hljs-number">1.2</span> },
      { name: <span class="hljs-string">"orange"</span>, value: <span class="hljs-number">0.95</span> },
    ],
  },
};

console.<span class="hljs-keyword">log</span>(subtotalSelector(exampleState)); // <span class="hljs-number">2.15</span>
console.<span class="hljs-keyword">log</span>(taxSelector(exampleState)); // <span class="hljs-number">0.172</span>
console.<span class="hljs-keyword">log</span>(totalSelector(exampleState)); // { total: <span class="hljs-number">2.322</span> }
</code></pre>
</li>
</ol>




<ol>
<li><h3 id="does-the-statics-object-work-with-es6-classes-in-react-">Does the statics object work with ES6 classes in React?</h3>
<p>No, <code>statics</code> only works with <code>React.createClass()</code>:</p>
<pre><code class="lang-javascript">someComponent = React.createClass({
  statics: {
    someMethod: <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> </span>{
      <span class="hljs-comment">// ..</span>
    },
  },
});
</code></pre>
<p>But you can write statics inside ES6+ classes as below,</p>
<pre><code class="lang-javascript"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Component</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span> </span>{
  static propTypes = {
    <span class="hljs-comment">// ...</span>
  };

  static someMethod() {
    <span class="hljs-comment">// ...</span>
  }
}
</code></pre>
<p>or writing them outside class as below,</p>
<pre><code class="lang-javascript">class <span class="hljs-type">Component</span> extends <span class="hljs-type">React</span>.<span class="hljs-type">Component</span> {
   ....
}

<span class="hljs-type">Component</span>.propTypes = <span class="hljs-meta">{...}</span>
<span class="hljs-type">Component</span>.someMethod = function()<span class="hljs-meta">{....}</span>
</code></pre>
</li>
</ol>




<ol>
<li><h3 id="can-redux-only-be-used-with-react-">Can Redux only be used with React?</h3>
<p>Redux can be used as a data store for any UI layer. The most common usage is with React and React Native, but there are bindings available for Angular, Angular 2, Vue, Mithril, and more. Redux simply provides a subscription mechanism which can be used by any other code.</p>
</li>
</ol>




<ol>
<li><h3 id="do-you-need-to-have-a-particular-build-tool-to-use-redux-">Do you need to have a particular build tool to use Redux?</h3>
<p>Redux is originally written in ES6 and transpiled for production into ES5 with Webpack and Babel. You should be able to use it regardless of your JavaScript build process. Redux also offers a UMD build that can be used directly without any build process at all.</p>
</li>
</ol>




<ol>
<li><h3 id="how-redux-form-initialvalues-get-updated-from-state-">How Redux Form <code>initialValues</code> get updated from state?</h3>
<p>You need to add <code>enableReinitialize : true</code> setting.</p>
<pre><code class="lang-javascript">const InitializeFromStateForm = reduxForm({
  form: <span class="hljs-string">"initializeFromState"</span>,
  enableReinitialize: true,
})(<span class="hljs-name">UserEdit</span>)<span class="hljs-comment">;</span>
</code></pre>
<p>If your <code>initialValues</code> prop gets updated, your form will update too.</p>
</li>
</ol>




<ol>
<li><h3 id="how-react-proptypes-allow-different-types-for-one-prop-">How React PropTypes allow different types for one prop?</h3>
<p>You can use <code>oneOfType()</code> method of <code>PropTypes</code>.</p>
<p>For example, the height property can be defined with either <code>string</code> or <code>number</code> type as below:</p>
<pre><code class="lang-javascript">Component.propTypes = {
  <span class="hljs-attribute">size</span>: PropTypes<span class="hljs-variable">.oneOfType</span>([PropTypes<span class="hljs-variable">.string</span>, PropTypes<span class="hljs-variable">.number</span>]),
};
</code></pre>
</li>
</ol>




<ol>
<li><h3 id="can-i-import-an-svg-file-as-react-component-">Can I import an SVG file as react component?</h3>
<p>You can import SVG directly as component instead of loading it as a file. This feature is available with <code>react-scripts@2.0.0</code> and higher.</p>
<p>```jsx harmony
import { ReactComponent as Logo } from &quot;./logo.svg&quot;;</p>
<p>const App = () =&gt; (
  <div></p>
<pre><code>{<span class="hljs-comment">/* Logo is an actual react component */</span>}
<span class="hljs-params">&lt;Logo /&gt;</span>
</code></pre><p>  </div>
);
```</p>
<p><strong>Note</strong>: Don&#39;t forget about the curly braces in the import.</p>
</li>
</ol>




<ol>
<li><h3 id="why-are-inline-ref-callbacks-or-functions-not-recommended-">Why are inline ref callbacks or functions not recommended?</h3>
<p>If the ref callback is defined as an inline function, it will get called twice during updates, first with null and then again with the DOM element. This is because a new instance of the function is created with each render, so React needs to clear the old ref and set up the new one.</p>
<pre><code class="lang-jsx"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserForm</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Component</span> </span>{
  handleSubmit = () =&gt; {
    console.log(<span class="hljs-string">"Input Value is: "</span>, <span class="hljs-keyword">this</span>.input.value);
  };

  render() {
    <span class="hljs-keyword">return</span> (
      &lt;form onSubmit={<span class="hljs-keyword">this</span>.handleSubmit}&gt;
        &lt;input <span class="hljs-class"><span class="hljs-keyword">type</span></span>=<span class="hljs-string">"text"</span> ref={(input) =&gt; (<span class="hljs-keyword">this</span>.input = input)} /&gt; <span class="hljs-comment">//</span>
        <span class="hljs-type">Access</span> <span class="hljs-type">DOM</span> input in handle submit
        &lt;button <span class="hljs-class"><span class="hljs-keyword">type</span></span>=<span class="hljs-string">"submit"</span>&gt;<span class="hljs-type">Submit</span>&lt;/button&gt;
      &lt;/form&gt;
    );
  }
}
</code></pre>
<p>But our expectation is for the ref callback to get called once, when the component mounts. One quick fix is to use the ES7 class property syntax to define the function</p>
<pre><code class="lang-jsx"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserForm</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Component</span> </span>{
  handleSubmit = () =&gt; {
    console.log(<span class="hljs-string">"Input Value is: "</span>, <span class="hljs-keyword">this</span>.input.value);
  };

  setSearchInput = (input) =&gt; {
    <span class="hljs-keyword">this</span>.input = input;
  };

  render() {
    <span class="hljs-keyword">return</span> (
      &lt;form onSubmit={<span class="hljs-keyword">this</span>.handleSubmit}&gt;
        &lt;input <span class="hljs-class"><span class="hljs-keyword">type</span></span>=<span class="hljs-string">"text"</span> ref={<span class="hljs-keyword">this</span>.setSearchInput} /&gt; <span class="hljs-comment">// Access DOM input</span>
        in handle submit
        &lt;button <span class="hljs-class"><span class="hljs-keyword">type</span></span>=<span class="hljs-string">"submit"</span>&gt;<span class="hljs-type">Submit</span>&lt;/button&gt;
      &lt;/form&gt;
    );
  }
}
</code></pre>
<p><strong>Note:</strong> In React v16.3,
<strong><a href="#table-of-contents">⬆ Back to Top</a></strong></p>
</li>
<li><h3 id="what-is-render-hijacking-in-react-">What is render hijacking in react?</h3>
<p>The concept of render hijacking is the ability to control what a component will output from another component. It means that you decorate your component by wrapping it into a Higher-Order component. By wrapping, you can inject additional props or make other changes, which can cause changing logic of rendering. It does not actually enable hijacking, but by using HOC you make your component behave differently.</p>
</li>
</ol>




<ol>
<li><h3 id="what-are-hoc-factory-implementations-">What are HOC factory implementations?</h3>
<p>There are two main ways of implementing HOCs in React.</p>
<ol>
<li>Props Proxy (PP) and</li>
<li>Inheritance Inversion (II).</li>
</ol>
<p>But they follow different approaches for manipulating the <em>WrappedComponent</em>.</p>
<p><strong>Props Proxy</strong></p>
<p>In this approach, the render method of the HOC returns a React Element of the type of the WrappedComponent. We also pass through the props that the HOC receives, hence the name <strong>Props Proxy</strong>.</p>
<pre><code class="lang-jsx">function ppHOC(<span class="hljs-type">WrappedComponent</span>) {
  <span class="hljs-keyword">return</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PP</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span> </span>{
    render() {
      <span class="hljs-keyword">return</span> &lt;<span class="hljs-type">WrappedComponent</span> {...<span class="hljs-keyword">this</span>.props} /&gt;;
    }
  };
}
</code></pre>
<p><strong>Inheritance Inversion</strong></p>
<p>In this approach, the returned HOC class (Enhancer) extends the WrappedComponent. It is called Inheritance Inversion because instead of the WrappedComponent extending some Enhancer class, it is passively extended by the Enhancer. In this way the relationship between them seems <strong>inverse</strong>.</p>
<pre><code class="lang-jsx">function iiHOC(<span class="hljs-type">WrappedComponent</span>) {
  <span class="hljs-keyword">return</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Enhancer</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">WrappedComponent</span> </span>{
    render() {
      <span class="hljs-keyword">return</span> <span class="hljs-keyword">super</span>.render();
    }
  };
}
</code></pre>
</li>
</ol>




<ol>
<li><h3 id="how-to-pass-numbers-to-react-component-">How to pass numbers to React component?</h3>
<p>You should be passing the numbers via curly braces({}) where as strings in quotes</p>
<pre><code class="lang-jsx">React.render(
  &lt;User age={<span class="hljs-number">30</span>} department={<span class="hljs-string">"IT"</span>} /&gt;,
  document.getElementById(<span class="hljs-string">"container"</span>)
);
</code></pre>
</li>
</ol>




<ol>
<li><h3 id="do-i-need-to-keep-all-my-state-into-redux-should-i-ever-use-react-internal-state-">Do I need to keep all my state into Redux? Should I ever use react internal state?</h3>
<p>It is up to the developer&#39;s decision, i.e., it is developer&#39;s job to determine what kinds of state make up your application, and where each piece of state should live. Some users prefer to keep every single piece of data in Redux, to maintain a fully serializable and controlled version of their application at all times. Others prefer to keep non-critical or UI state, such as “is this dropdown currently open”, inside a component&#39;s internal state.</p>
<p>Below are the thumb rules to determine what kind of data should be put into Redux</p>
<ol>
<li>Do other parts of the application care about this data?</li>
<li>Do you need to be able to create further derived data based on this original data?</li>
<li>Is the same data being used to drive multiple components?</li>
<li>Is there value to you in being able to restore this state to a given point in time (ie, time travel debugging)?</li>
<li>Do you want to cache the data (i.e, use what&#39;s in state if it&#39;s already there instead of re-requesting it)?</li>
</ol>
</li>
</ol>




<ol>
<li><h3 id="what-is-the-purpose-of-registerserviceworker-in-react-">What is the purpose of registerServiceWorker in React?</h3>
<p>React creates a service worker for you without any configuration by default. The service worker is a web API that helps you cache your assets and other files so that when the user is offline or on a slow network, he/she can still see results on the screen, as such, it helps you build a better user experience, that&#39;s what you should know about service worker for now. It&#39;s all about adding offline capabilities to your site.</p>
<pre><code class="lang-jsx"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">"react"</span>;
<span class="hljs-keyword">import</span> ReactDOM <span class="hljs-keyword">from</span> <span class="hljs-string">"react-dom"</span>;
<span class="hljs-keyword">import</span> App <span class="hljs-keyword">from</span> <span class="hljs-string">"./App"</span>;
<span class="hljs-keyword">import</span> registerServiceWorker <span class="hljs-keyword">from</span> <span class="hljs-string">"./registerServiceWorker"</span>;

ReactDOM.render(&lt;App /&gt;, <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">"root"</span>));
registerServiceWorker();
</code></pre>
</li>
</ol>




<ol>
<li><h3 id="what-is-react-memo-function-">What is React memo function?</h3>
<p>Class components can be restricted from re-rendering when their input props are the same using <strong>PureComponent or shouldComponentUpdate</strong>. Now you can do the same with function components by wrapping them in <strong>React.memo</strong>.</p>
<pre><code class="lang-jsx"><span class="hljs-keyword">const</span> MyComponent = React.memo(<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">MyComponent</span><span class="hljs-params">(props)</span> </span>{
  <span class="hljs-comment">/* only rerenders if props change */</span>
});
</code></pre>
</li>
</ol>




<ol>
<li><h3 id="what-is-react-lazy-function-">What is React lazy function?</h3>
<p>The <code>React.lazy</code> function lets you render a dynamic import as a regular component. It will automatically load the bundle containing the <code>OtherComponent</code> when the component gets rendered. This must return a Promise which resolves to a module with a default export containing a React component.</p>
<pre><code class="lang-jsx"><span class="hljs-keyword">const</span> OtherComponent = React.lazy(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">"./OtherComponent"</span>));

<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">MyComponent</span>(<span class="hljs-params"></span>) </span>{
  <span class="hljs-keyword">return</span> (
    <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-name">OtherComponent</span> /&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>
  );
}
</code></pre>
<p><strong>Note:</strong>
<code>React.lazy</code> and <code>Suspense</code> is not yet available for server-side rendering. If you want to do code-splitting in a server rendered app, we still recommend React Loadable.</p>
</li>
</ol>




<ol>
<li><h3 id="how-to-prevent-unnecessary-updates-using-setstate-">How to prevent unnecessary updates using setState?</h3>
<p>You can compare the current value of the state with an existing state value and decide whether to rerender the page or not. If the values are the same then you need to return <strong>null</strong> to stop re-rendering otherwise return the latest state value.</p>
<p>For example, the user profile information is conditionally rendered as follows,</p>
<pre><code class="lang-jsx">getUserProfile = (<span class="hljs-keyword">user</span>) =&gt; {
  const latestAddress = <span class="hljs-keyword">user</span>.address;
  this.<span class="hljs-built_in">set</span>State((<span class="hljs-keyword">state</span>) =&gt; {
    if (<span class="hljs-keyword">state</span>.address === latestAddress) {
      return null;
    } else {
      return { title: latestAddress };
    }
  });
};
</code></pre>
</li>
</ol>




<ol>
<li><h3 id="how-do-you-render-array-strings-and-numbers-in-react-16-version-">How do you render Array, Strings and Numbers in React 16 Version?</h3>
<p><strong>Arrays</strong>: Unlike older releases, you don&#39;t need to make sure <strong>render</strong> method return a single element in React16. You are able to return multiple sibling elements without a wrapping element by returning an array.</p>
<p>For example, let us take the below list of developers,</p>
<pre><code class="lang-jsx">const ReactJSDevs = () =&gt; {
  <span class="hljs-built_in">return</span> [
    &lt;<span class="hljs-built_in">li</span> <span class="hljs-built_in">key</span>=<span class="hljs-string">"1"</span>&gt;John&lt;/<span class="hljs-built_in">li</span>&gt;,
    &lt;<span class="hljs-built_in">li</span> <span class="hljs-built_in">key</span>=<span class="hljs-string">"2"</span>&gt;Jackie&lt;/<span class="hljs-built_in">li</span>&gt;,
    &lt;<span class="hljs-built_in">li</span> <span class="hljs-built_in">key</span>=<span class="hljs-string">"3"</span>&gt;Jordan&lt;/<span class="hljs-built_in">li</span>&gt;,
  ];
};
</code></pre>
<p>You can also merge this array of items in another array component.</p>
<pre><code class="lang-jsx"><span class="hljs-keyword">const</span> JSDevs = <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> {
  <span class="hljs-keyword">return</span> (
    <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>Brad<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>Brodge<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-name">ReactJSDevs</span> /&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>Brandon<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span>
  );
};
</code></pre>
<p><strong>Strings and Numbers:</strong> You can also return string and number type from the render method.</p>
<pre><code class="lang-jsx">render() {
 <span class="hljs-keyword">return</span> <span class="hljs-string">'Welcome to ReactJS questions'</span>;
}
<span class="hljs-comment">// Number</span>
render() {
 <span class="hljs-keyword">return</span> <span class="hljs-number">2018</span>;
}
</code></pre>
</li>
</ol>




<ol>
<li><h3 id="how-to-use-class-field-declarations-syntax-in-react-classes-">How to use class field declarations syntax in React classes?</h3>
<p>React Class Components can be made much more concise using the class field declarations. You can initialize the local state without using the constructor and declare class methods by using arrow functions without the extra need to bind them.</p>
<p>Let&#39;s take a counter example to demonstrate class field declarations for state without using constructor and methods without binding,</p>
<pre><code class="lang-jsx"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Counter</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Component</span> </span>{
  state = { <span class="hljs-attr">value</span>: <span class="hljs-number">0</span> };

  handleIncrement = <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> {
    <span class="hljs-keyword">this</span>.setState(<span class="hljs-function">(<span class="hljs-params">prevState</span>) =&gt;</span> ({
      <span class="hljs-attr">value</span>: prevState.value + <span class="hljs-number">1</span>,
    }));
  };

  handleDecrement = <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> {
    <span class="hljs-keyword">this</span>.setState(<span class="hljs-function">(<span class="hljs-params">prevState</span>) =&gt;</span> ({
      <span class="hljs-attr">value</span>: prevState.value - <span class="hljs-number">1</span>,
    }));
  };

  render() {
    <span class="hljs-keyword">return</span> (
      <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>
        {this.state.value}

        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">{this.handleIncrement}</span>&gt;</span>+<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">{this.handleDecrement}</span>&gt;</span>-<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>
      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>
    );
  }
}
</code></pre>
</li>
</ol>




<ol>
<li><h3 id="what-are-hooks-">What are hooks?</h3>
<p>Hooks is a special JavaScript function that allows you use state and other React features without writing a class. This pattern has been introduced as a new feature in React 16.8 and helped to isolate the stateful logic from the components.</p>
<p>Let&#39;s see an example of useState hook:</p>
<pre><code class="lang-jsx"><span class="hljs-keyword">import</span> { useState } <span class="hljs-keyword">from</span> <span class="hljs-string">"react"</span>;

<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Example</span>(<span class="hljs-params"></span>) </span>{
  <span class="hljs-comment">// Declare a new state variable, which we'll call "count"</span>
  <span class="hljs-keyword">const</span> [count, setCount] = useState(<span class="hljs-number">0</span>);

  <span class="hljs-keyword">return</span> (
    <span class="xml"><span class="hljs-tag">&lt;&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>You clicked {count} times<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">{()</span> =&gt;</span> setCount(count + 1)}&gt;Click me<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>
    <span class="hljs-tag">&lt;/&gt;</span>
  );
}</span>
</code></pre>
<p><strong>Note:</strong> Hooks can be used inside an existing function component without rewriting the component.</p>
</li>
</ol>




<ol>
<li><h3 id="what-rules-need-to-be-followed-for-hooks-">What rules need to be followed for hooks?</h3>
<p>You need to follow two rules in order to use hooks,</p>
<ol>
<li><strong>Call Hooks only at the top level of your react functions:</strong> You shouldn’t call Hooks inside loops, conditions, or nested functions. This will ensure that Hooks are called in the same order each time a component renders and it preserves the state of Hooks between multiple useState and useEffect calls.</li>
<li><strong>Call Hooks from React Functions only:</strong> You shouldn’t call Hooks from regular JavaScript functions. Instead, you should call them from either function components or custom hooks.</li>
</ol>
<p>The eslint plugin named <strong>eslint-plugin-react-hooks</strong> can be used to enforce these two rules.</p>
</li>
</ol>




<ol>
<li><h3 id="how-to-ensure-hooks-followed-the-rules-in-your-project-">How to ensure hooks followed the rules in your project?</h3>
<p>React team released an ESLint plugin called <strong>eslint-plugin-react-hooks</strong> that enforces these two rules. You can add this plugin to your project using the below command,</p>
<pre><code class="lang-javascript">npm <span class="hljs-keyword">install</span> eslint-<span class="hljs-keyword">plugin</span>-react-hooks@<span class="hljs-keyword">next</span>
</code></pre>
<p>And apply the below config in your ESLint config file,</p>
<pre><code class="lang-javascript"><span class="hljs-comment">// Your ESLint configuration</span>
{
  <span class="hljs-string">"plugins"</span>: [
    <span class="hljs-comment">// ...</span>
    <span class="hljs-string">"react-hooks"</span>
  ],
  <span class="hljs-string">"rules"</span>: {
    <span class="hljs-comment">// ...</span>
    <span class="hljs-string">"react-hooks/rules-of-hooks"</span>: <span class="hljs-string">"error"</span>
  }
}
</code></pre>
<p>For example, the linter enforce proper naming convention for hooks. If you rename your custom hooks which as prefix &quot;use&quot; to something else then linter won&#39;t allow you to call built-in hooks such as useState, useEffect etc inside of your custom hook anymore.</p>
<p><strong>Note:</strong> This plugin is intended to use in Create React App by default.</p>
</li>
</ol>




<ol>
<li><h3 id="what-are-the-differences-between-flux-and-redux-">What are the differences between Flux and Redux?</h3>
<p>Below are the major differences between Flux and Redux</p>
<p>| Flux                                           | Redux                                      |
| ---------------------------------------------- | ------------------------------------------ |
| State is mutable                               | State is immutable                         |
| The Store contains both state and change logic | The Store and change logic are separate    |
| There are multiple stores exist                | There is only one store exist              |
| All the stores are disconnected and flat       | Single store with hierarchical reducers    |
| It has a singleton dispatcher                  | There is no concept of dispatcher          |
| React components subscribe to the store        | Container components uses connect function |</p>
</li>
</ol>




<ol>
<li><h3 id="what-are-the-benefits-of-react-router-v4-">What are the benefits of React Router V4?</h3>
<p>Below are the main benefits of React Router V4 module,</p>
<ol>
<li>In React Router v4(version 4), the API is completely about components. A router can be visualized as a single component(<code>&lt;BrowserRouter&gt;</code>) which wraps specific child router components(<code>&lt;Route&gt;</code>).</li>
<li>You don&#39;t need to manually set history. The router module will take care history by wrapping routes with <code>&lt;BrowserRouter&gt;</code> component.</li>
<li>The application size is reduced by adding only the specific router module(Web, core, or native)</li>
</ol>
</li>
</ol>




<ol>
<li><h3 id="can-you-describe-about-componentdidcatch-lifecycle-method-signature-">Can you describe about componentDidCatch lifecycle method signature?</h3>
<p>The <strong>componentDidCatch</strong> lifecycle method is invoked after an error has been thrown by a descendant component. The method receives two parameters,</p>
<ol>
<li>error: - The error object which was thrown</li>
<li>info: - An object with a componentStack key contains the information about which component threw the error.</li>
</ol>
<p>The method structure would be as follows</p>
<pre><code class="lang-javascript">componentDidCatch(<span class="hljs-name">error</span>, info)<span class="hljs-comment">;</span>
</code></pre>
</li>
</ol>




<ol>
<li><h3 id="in-which-scenarios-error-boundaries-do-not-catch-errors-">In which scenarios error boundaries do not catch errors?</h3>
<p>Below are the cases in which error boundaries doesn&#39;t work,</p>
<ol>
<li>Inside Event handlers</li>
<li>Asynchronous code using <strong>setTimeout or requestAnimationFrame</strong> callbacks</li>
<li>During Server side rendering</li>
<li>When errors thrown in the error boundary code itself</li>
</ol>
</li>
</ol>




<ol>
<li><h3 id="why-do-you-not-need-error-boundaries-for-event-handlers-">Why do you not need error boundaries for event handlers?</h3>
<p>Error boundaries do not catch errors inside event handlers.</p>
<p>React doesn’t need error boundaries to recover from errors in event handlers. Unlike the render method and lifecycle methods, the event handlers don’t happen during rendering. So if they throw, React still knows what to display on the screen.</p>
<p>If you need to catch an error inside an event handler, use the regular JavaScript try / catch statement:</p>
<pre><code class="lang-javascript"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyComponent</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span> </span>{
  constructor(props) {
    <span class="hljs-keyword">super</span>(props);
    <span class="hljs-keyword">this</span>.state = { error: <span class="hljs-literal">null</span> };
    <span class="hljs-keyword">this</span>.handleClick = <span class="hljs-keyword">this</span>.handleClick.bind(<span class="hljs-keyword">this</span>);
  }

  handleClick() {
    <span class="hljs-keyword">try</span> {
      <span class="hljs-comment">// Do something that could throw</span>
    } <span class="hljs-keyword">catch</span> (error) {
      <span class="hljs-keyword">this</span>.setState({ error });
    }
  }

  render() {
    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.state.error) {
      <span class="hljs-keyword">return</span> &lt;h1&gt;<span class="hljs-type">Caught</span> an error.&lt;/h1&gt;;
    }
    <span class="hljs-keyword">return</span> &lt;button onClick={<span class="hljs-keyword">this</span>.handleClick}&gt;<span class="hljs-type">Click</span> <span class="hljs-type">Me</span>&lt;/button&gt;;
  }
}
</code></pre>
<p>Note that the above example is demonstrating regular JavaScript behavior and doesn’t use error boundaries.</p>
</li>
</ol>




<ol>
<li><h3 id="what-is-the-difference-between-try-catch-block-and-error-boundaries-">What is the difference between try catch block and error boundaries?</h3>
<p>Try catch block works with imperative code whereas error boundaries are meant for declarative code to render on the screen.</p>
<p>For example, the try catch block used for below imperative code</p>
<pre><code class="lang-javascript"><span class="hljs-keyword">try</span> {
  showButton();
} <span class="hljs-keyword">catch</span> (<span class="hljs-keyword">error</span>) {
  <span class="hljs-comment">// ...</span>
}
</code></pre>
<p>Whereas error boundaries wrap declarative code as below,</p>
<pre><code class="lang-javascript"><span class="hljs-section">&lt;ErrorBoundary&gt;</span>
  <span class="hljs-section">&lt;MyComponent /&gt;</span>
<span class="hljs-section">&lt;/ErrorBoundary&gt;</span>
</code></pre>
<p>So if an error occurs in a <strong>componentDidUpdate</strong> method caused by a <strong>setState</strong> somewhere deep in the tree, it will still correctly propagate to the closest error boundary.</p>
</li>
</ol>




<ol>
<li><h3 id="what-is-the-behavior-of-uncaught-errors-in-react-16-">What is the behavior of uncaught errors in react 16?</h3>
In React 16, errors that were not caught by any error boundary will result in unmounting of the whole React component tree. The reason behind this decision is that it is worse to leave corrupted UI in place than to completely remove it. For example, it is worse for a payments app to display a wrong amount than to render nothing.</li>
</ol>




<ol>
<li><h3 id="what-is-the-proper-placement-for-error-boundaries-">What is the proper placement for error boundaries?</h3>
The granularity of error boundaries usage is up to the developer based on project needs. You can follow either of these approaches,<ol>
<li>You can wrap top-level route components to display a generic error message for the entire application.</li>
<li>You can also wrap individual components in an error boundary to protect them from crashing the rest of the application.</li>
</ol>
</li>
</ol>




<ol>
<li><h3 id="what-is-the-benefit-of-component-stack-trace-from-error-boundary-">What is the benefit of component stack trace from error boundary?</h3>
<p>Apart from error messages and javascript stack, React16 will display the component stack trace with file names and line numbers using error boundary concept.</p>
<p>For example, BuggyCounter component displays the component stack trace as below,</p>
<p><img src="images/error_boundary.png" alt="stacktrace"></p>
</li>
</ol>




<ol>
<li><h3 id="what-is-the-required-method-to-be-defined-for-a-class-component-">What is the required method to be defined for a class component?</h3>
The <code>render()</code> method is the only required method in a class component. i.e, All methods other than render method are optional for a class component.</li>
</ol>




<ol>
<li><h3 id="what-are-the-possible-return-types-of-render-method-">What are the possible return types of render method?</h3>
<p>Below are the list of following types used and return from render method,</p>
<ol>
<li><strong>React elements:</strong> Elements that instruct React to render a DOM node. It includes html elements such as <code>&lt;div/&gt;</code> and user defined elements.</li>
<li><strong>Arrays and fragments:</strong> Return multiple elements to render as Arrays and Fragments to wrap multiple elements</li>
<li><strong>Portals:</strong> Render children into a different DOM subtree.</li>
<li><strong>String and numbers:</strong> Render both Strings and Numbers as text nodes in the DOM</li>
<li><strong>Booleans or null:</strong> Doesn&#39;t render anything but these types are used to conditionally render content.</li>
</ol>
</li>
</ol>




<ol>
<li><h3 id="what-is-the-main-purpose-of-constructor-">What is the main purpose of constructor?</h3>
<p>The constructor is mainly used for two purposes,</p>
<ol>
<li>To initialize local state by assigning object to this.state</li>
<li>For binding event handler methods to the instance
For example, the below code covers both the above cases,</li>
</ol>
<pre><code class="lang-javascript"><span class="hljs-function"><span class="hljs-keyword">constructor</span><span class="hljs-params">(props)</span> <span class="hljs-comment">{
  super(props);
  // Don't call this.setState() here!
  this.state = { counter: 0 }</span>;</span>
  this.handleClick = this.handleClick.bind(this);
}
</code></pre>
</li>
</ol>




<ol>
<li><h3 id="is-it-mandatory-to-define-constructor-for-react-component-">Is it mandatory to define constructor for React component?</h3>
No, it is not mandatory. i.e, If you don’t initialize state and you don’t bind methods, you don’t need to implement a constructor for your React component.</li>
</ol>




<ol>
<li><h3 id="what-are-default-props-">What are default props?</h3>
<p>The <em>defaultProps</em> can be defined as a property on the component to set the default values for the props. These default props are used when props not supplied(i.e., undefined props), but not for null props. That means, If you provide null value then it remains null value.</p>
<p>For example, let us create color default prop for the button component,</p>
<pre><code class="lang-javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">MyButton</span> {</span>
  <span class="hljs-comment">// ...</span>
}

MyButton.defaultProps = {
  <span class="hljs-built_in">color</span>: <span class="hljs-string">"red"</span>,
};
</code></pre>
<p>If <code>props.color</code> is not provided then it will set the default value to &#39;red&#39;. i.e, Whenever you try to access the color prop it uses the default value</p>
<pre><code class="lang-javascript">render() {
   <span class="hljs-keyword">return</span> &lt;MyButton /&gt; ; <span class="hljs-comment">// props.color will contain red value</span>
 }
</code></pre>
</li>
</ol>




<ol>
<li><h3 id="why-should-not-call-setstate-in-componentwillunmount-">Why should not call setState in componentWillUnmount?</h3>
You should not call <code>setState()</code> in <code>componentWillUnmount()</code> because once a component instance is unmounted, it will never be mounted again.</li>
</ol>




<ol>
<li><h3 id="what-is-the-purpose-of-getderivedstatefromerror-">What is the purpose of getDerivedStateFromError?</h3>
<p>This lifecycle method is invoked after an error has been thrown by a descendant component. It receives the error that was thrown as a parameter and should return a value to update state.</p>
<p>The signature of the lifecycle method is as follows,</p>
<pre><code class="lang-javascript"><span class="hljs-keyword">static</span> getDerivedStateFromError(<span class="hljs-keyword">error</span>)
</code></pre>
<p>Let us take error boundary use case with the above lifecycle method for demonstration purpose,</p>
<pre><code class="lang-javascript"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ErrorBoundary</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span> </span>{
  constructor(props) {
    <span class="hljs-keyword">super</span>(props);
    <span class="hljs-keyword">this</span>.state = { hasError: <span class="hljs-literal">false</span> };
  }

  static getDerivedStateFromError(error) {
    <span class="hljs-comment">// Update state so the next render will show the fallback UI.</span>
    <span class="hljs-keyword">return</span> { hasError: <span class="hljs-literal">true</span> };
  }

  render() {
    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.state.hasError) {
      <span class="hljs-comment">// You can render any custom fallback UI</span>
      <span class="hljs-keyword">return</span> &lt;h1&gt;<span class="hljs-type">Something</span> went wrong.&lt;/h1&gt;;
    }

    <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.props.children;
  }
}
</code></pre>
</li>
</ol>




<ol>
<li><h3 id="what-is-the-methods-order-when-component-re-rendered-">What is the methods order when component re-rendered?</h3>
<p>An update can be caused by changes to props or state. The below methods are called in the following order when a component is being re-rendered.</p>
<ol>
<li>static getDerivedStateFromProps()</li>
<li>shouldComponentUpdate()</li>
<li>render()</li>
<li>getSnapshotBeforeUpdate()</li>
<li>componentDidUpdate()</li>
</ol>
</li>
</ol>




<ol>
<li><h3 id="what-are-the-methods-invoked-during-error-handling-">What are the methods invoked during error handling?</h3>
<p>Below methods are called when there is an error during rendering, in a lifecycle method, or in the constructor of any child component.</p>
<ol>
<li>static getDerivedStateFromError()</li>
<li>componentDidCatch()</li>
</ol>
</li>
</ol>




<ol>
<li><h3 id="what-is-the-purpose-of-displayname-class-property-">What is the purpose of displayName class property?</h3>
<p>The displayName string is used in debugging messages. Usually, you don’t need to set it explicitly because it’s inferred from the name of the function or class that defines the component. You might want to set it explicitly if you want to display a different name for debugging purposes or when you create a higher-order component.</p>
<p>For example, To ease debugging, choose a display name that communicates that it’s the result of a withSubscription HOC.</p>
<pre><code class="lang-javascript">function withSubscription(<span class="hljs-type">WrappedComponent</span>) {
  <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">WithSubscription</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span> </span>{
    <span class="hljs-comment">/* ... */</span>
  }
  <span class="hljs-type">WithSubscription</span>.displayName = `<span class="hljs-type">WithSubscription</span>(${getDisplayName(
    <span class="hljs-type">WrappedComponent</span>
  )})`;
  <span class="hljs-keyword">return</span> <span class="hljs-type">WithSubscription</span>;
}
function getDisplayName(<span class="hljs-type">WrappedComponent</span>) {
  <span class="hljs-keyword">return</span> (
    <span class="hljs-type">WrappedComponent</span>.displayName || <span class="hljs-type">WrappedComponent</span>.name || <span class="hljs-string">"Component"</span>
  );
}
</code></pre>
</li>
</ol>




<ol>
<li><h3 id="what-is-the-browser-support-for-react-applications-">What is the browser support for react applications?</h3>
React supports all popular browsers, including Internet Explorer 9 and above, although some polyfills are required for older browsers such as IE 9 and IE 10. If you use <strong>es5-shim and es5-sham</strong> polyfill then it even support old browsers that doesn&#39;t support ES5 methods.</li>
</ol>




<ol>
<li><h3 id="what-is-the-purpose-of-unmountcomponentatnode-method-">What is the purpose of unmountComponentAtNode method?</h3>
<p>This method is available from react-dom package and it removes a mounted React component from the DOM and clean up its event handlers and state. If no component was mounted in the container, calling this function does nothing. Returns true if a component was unmounted and false if there was no component to unmount.</p>
<p>The method signature would be as follows,</p>
<pre><code class="lang-javascript">ReactDOM.unmountComponentAtNode(container)<span class="hljs-comment">;</span>
</code></pre>
</li>
</ol>




<ol>
<li><h3 id="what-is-code-splitting-">What is code-splitting?</h3>
<p>Code-Splitting is a feature supported by bundlers like Webpack and Browserify which can create multiple bundles that can be dynamically loaded at runtime. The react project supports code splitting via dynamic import() feature.</p>
<p>For example, in the below code snippets, it will make moduleA.js and all its unique dependencies as a separate chunk that only loads after the user clicks the &#39;Load&#39; button.
<strong>moduleA.js</strong></p>
<pre><code class="lang-javascript"><span class="hljs-attribute">const</span> moduleA = <span class="hljs-string">"Hello"</span>;

<span class="hljs-section">export</span> { <span class="hljs-attribute">moduleA</span> };
</code></pre>
<p><strong>App.js</strong></p>
<pre><code class="lang-javascript"><span class="hljs-keyword">import</span> React, { Component } <span class="hljs-keyword">from</span> <span class="hljs-string">"react"</span>;

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Component</span> </span>{
  handleClick = <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> {
    <span class="hljs-keyword">import</span>(<span class="hljs-string">"./moduleA"</span>)
      .then(<span class="hljs-function">(<span class="hljs-params">{ moduleA }</span>) =&gt;</span> {
        <span class="hljs-comment">// Use moduleA</span>
      })
      .catch(<span class="hljs-function">(<span class="hljs-params">err</span>) =&gt;</span> {
        <span class="hljs-comment">// Handle failure</span>
      });
  };

  render() {
    <span class="hljs-keyword">return</span> (
      <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">{this.handleClick}</span>&gt;</span>Load<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>
      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>
    );
  }
}

<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> App;
</code></pre>
</li>
</ol>




<ol>
<li><h3 id="what-are-keyed-fragments-">What are Keyed Fragments?</h3>
<p>The Fragments declared with the explicit <React.Fragment> syntax may have keys. The general use case is mapping a collection to an array of fragments as below,</p>
<pre><code class="lang-javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Glossary</span>(<span class="hljs-params">props</span>) </span>{
  <span class="hljs-keyword">return</span> (
    <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">dl</span>&gt;</span>
      {props.items.map((item) =&gt; (
        // Without the `key`, React will fire a key warning
        <span class="hljs-tag">&lt;<span class="hljs-name">React.Fragment</span> <span class="hljs-attr">key</span>=<span class="hljs-string">{item.id}</span>&gt;</span>
          <span class="hljs-tag">&lt;<span class="hljs-name">dt</span>&gt;</span>{item.term}<span class="hljs-tag">&lt;/<span class="hljs-name">dt</span>&gt;</span>
          <span class="hljs-tag">&lt;<span class="hljs-name">dd</span>&gt;</span>{item.description}<span class="hljs-tag">&lt;/<span class="hljs-name">dd</span>&gt;</span>
        <span class="hljs-tag">&lt;/<span class="hljs-name">React.Fragment</span>&gt;</span>
      ))}
    <span class="hljs-tag">&lt;/<span class="hljs-name">dl</span>&gt;</span>
  );
}</span>
</code></pre>
<p><strong>Note:</strong> key is the only attribute that can be passed to Fragment. In the future, there might be a support for additional attributes, such as event handlers.</p>
</li>
</ol>




<ol>
<li><h3 id="does-react-support-all-html-attributes-">Does React support all HTML attributes?</h3>
<p>As of React 16, both standard or custom DOM attributes are fully supported. Since React components often take both custom and DOM-related props, React uses the camelCase convention just like the DOM APIs.</p>
<p>Let us take few props with respect to standard HTML attributes,</p>
<pre><code class="lang-javascript">&lt;<span class="hljs-selector-tag">div</span> tabIndex=<span class="hljs-string">"-1"</span> /&gt;      <span class="hljs-comment">// Just like node.tabIndex DOM API</span>
&lt;<span class="hljs-selector-tag">div</span> className=<span class="hljs-string">"Button"</span> /&gt; <span class="hljs-comment">// Just like node.className DOM API</span>
&lt;<span class="hljs-selector-tag">input</span> readOnly={true} /&gt;  <span class="hljs-comment">// Just like node.readOnly DOM API</span>
</code></pre>
<p>These props work similarly to the corresponding HTML attributes, with the exception of the special cases. It also support all SVG attributes.</p>
</li>
</ol>




<ol>
<li><h3 id="what-are-the-limitations-with-hocs-">What are the limitations with HOCs?</h3>
<p>Higher-order components come with a few caveats apart from its benefits. Below are the few listed in an order,</p>
<ol>
<li><p><strong>Don’t use HOCs inside the render method:</strong>
It is not recommended to apply a HOC to a component within the render method of a component.</p>
<pre><code class="lang-javascript">render() {
  <span class="hljs-comment">// A new version of EnhancedComponent is created on every render</span>
  <span class="hljs-comment">// EnhancedComponent1 !== EnhancedComponent2</span>
  <span class="hljs-keyword">const</span> EnhancedComponent = enhance(MyComponent);
  <span class="hljs-comment">// That causes the entire subtree to unmount/remount each time!</span>
  <span class="hljs-keyword">return</span> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">EnhancedComponent</span> /&gt;</span>;
}</span>
</code></pre>
<p>The above code impacts on performance by remounting a component that causes the state of that component and all of its children to be lost. Instead, apply HOCs outside the component definition so that the resulting component is created only once.</p>
</li>
<li><p><strong>Static methods must be copied over:</strong>
When you apply a HOC to a component the new component does not have any of the static methods of the original component</p>
<pre><code class="lang-javascript"><span class="hljs-comment">// Define a static method</span>
WrappedComponent.staticMethod = <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> </span>{
  <span class="hljs-comment">/*...*/</span>
};
<span class="hljs-comment">// Now apply a HOC</span>
<span class="hljs-keyword">const</span> EnhancedComponent = enhance(WrappedComponent);

<span class="hljs-comment">// The enhanced component has no static method</span>
<span class="hljs-keyword">typeof</span> EnhancedComponent.staticMethod === <span class="hljs-string">"undefined"</span>; <span class="hljs-comment">// true</span>
</code></pre>
<p>You can overcome this by copying the methods onto the container before returning it,</p>
<pre><code class="lang-javascript">function enhance(<span class="hljs-type">WrappedComponent</span>) {
  <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Enhance</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span> </span>{
    <span class="hljs-comment">/*...*/</span>
  }
  <span class="hljs-comment">// Must know exactly which method(s) to copy :(</span>
  <span class="hljs-type">Enhance</span>.staticMethod = <span class="hljs-type">WrappedComponent</span>.staticMethod;
  <span class="hljs-keyword">return</span> <span class="hljs-type">Enhance</span>;
}
</code></pre>
</li>
<li><p><strong>Refs aren’t passed through:</strong>
For HOCs you need to pass through all props to the wrapped component but this does not work for refs. This is because ref is not really a prop similar to key. In this case you need to use the React.forwardRef API</p>
</li>
</ol>
</li>
</ol>




<ol>
<li><h3 id="how-to-debug-forwardrefs-in-devtools-">How to debug forwardRefs in DevTools?</h3>
<p><strong>React.forwardRef</strong> accepts a render function as parameter and DevTools uses this function to determine what to display for the ref forwarding component.</p>
<p>For example, If you don&#39;t name the render function or not using displayName property then it will appear as ”ForwardRef” in the DevTools,</p>
<pre><code class="lang-javascript"><span class="hljs-keyword">const</span> WrappedComponent = React.forwardRef(<span class="hljs-function">(<span class="hljs-params">props, ref</span>) =&gt;</span> {
  <span class="hljs-keyword">return</span> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">LogProps</span> {<span class="hljs-attr">...props</span>} <span class="hljs-attr">forwardedRef</span>=<span class="hljs-string">{ref}</span> /&gt;</span>;
});</span>
</code></pre>
<p>But If you name the render function then it will appear as <strong>”ForwardRef(myFunction)”</strong></p>
<pre><code class="lang-javascript"><span class="hljs-keyword">const</span> WrappedComponent = React.forwardRef(<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">myFunction</span>(<span class="hljs-params">props, ref</span>) </span>{
  <span class="hljs-keyword">return</span> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">LogProps</span> {<span class="hljs-attr">...props</span>} <span class="hljs-attr">forwardedRef</span>=<span class="hljs-string">{ref}</span> /&gt;</span>;
});</span>
</code></pre>
<p>As an alternative, You can also set displayName property for forwardRef function,</p>
<pre><code class="lang-javascript">function logProps(<span class="hljs-type">Component</span>) {
  <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LogProps</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span> </span>{
    <span class="hljs-comment">// ...</span>
  }

  function forwardRef(props, ref) {
    <span class="hljs-keyword">return</span> &lt;<span class="hljs-type">LogProps</span> {...props} forwardedRef={ref} /&gt;;
  }

  <span class="hljs-comment">// Give this component a more helpful display name in DevTools.</span>
  <span class="hljs-comment">// e.g. "ForwardRef(logProps(MyComponent))"</span>
  const name = <span class="hljs-type">Component</span>.displayName || <span class="hljs-type">Component</span>.name;
  forwardRef.displayName = `logProps(${name})`;

  <span class="hljs-keyword">return</span> <span class="hljs-type">React</span>.forwardRef(forwardRef);
}
</code></pre>
</li>
</ol>




<ol>
<li><h3 id="when-component-props-defaults-to-true-">When component props defaults to true?</h3>
<p>If you pass no value for a prop, it defaults to true. This behavior is available so that it matches the behavior of HTML.</p>
<p>For example, below expressions are equivalent,</p>
<pre><code class="lang-javascript"><span class="hljs-tag">&lt;<span class="hljs-name">MyInput</span> <span class="hljs-attr">autocomplete</span> /&gt;</span>

<span class="hljs-tag">&lt;<span class="hljs-name">MyInput</span> <span class="hljs-attr">autocomplete</span>=<span class="hljs-string">{true}</span> /&gt;</span>
</code></pre>
<p><strong>Note:</strong> It is not recommended to use this approach because it can be confused with the ES6 object shorthand (example, <code>{name}</code> which is short for <code>{name: name}</code>)</p>
</li>
</ol>




<ol>
<li><h3 id="what-is-nextjs-and-major-features-of-it-">What is NextJS and major features of it?</h3>
<p>Next.js is a popular and lightweight framework for static and server‑rendered applications built with React. It also provides styling and routing solutions. Below are the major features provided by NextJS,</p>
<ol>
<li>Server-rendered by default</li>
<li>Automatic code splitting for faster page loads</li>
<li>Simple client-side routing (page based)</li>
<li>Webpack-based dev environment which supports (HMR)</li>
<li>Able to implement with Express or any other Node.js HTTP server</li>
<li>Customizable with your own Babel and Webpack configurations</li>
</ol>
</li>
</ol>




<ol>
<li><h3 id="how-do-you-pass-an-event-handler-to-a-component-">How do you pass an event handler to a component?</h3>
<p>You can pass event handlers and other functions as props to child components. It can be used in child component as below,</p>
<pre><code class="lang-html"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">"</span></span></span><span class="hljs-template-variable">{this.handleClick}</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span>
</code></pre>
</li>
</ol>




<ol>
<li><h3 id="is-it-good-to-use-arrow-functions-in-render-methods-">Is it good to use arrow functions in render methods?</h3>
<p>Yes, You can use. It is often the easiest way to pass parameters to callback functions. But you need to optimize the performance while using it.</p>
<pre><code class="lang-javascript"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Foo</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Component</span> </span>{
  handleClick() {
    console.log(<span class="hljs-string">"Click happened"</span>);
  }
  render() {
    <span class="hljs-keyword">return</span> &lt;button onClick={() =&gt; <span class="hljs-keyword">this</span>.handleClick()}&gt;<span class="hljs-type">Click</span> <span class="hljs-type">Me</span>&lt;/button&gt;;
  }
}
</code></pre>
<p><strong>Note:</strong> Using an arrow function in render method creates a new function each time the component renders, which may have performance implications</p>
</li>
</ol>




<ol>
<li><h3 id="how-to-prevent-a-function-from-being-called-multiple-times-">How to prevent a function from being called multiple times?</h3>
<p>If you use an event handler such as <strong>onClick or onScroll</strong> and want to prevent the callback from being fired too quickly, then you can limit the rate at which callback is executed. This can be achieved in the below possible ways,</p>
<ol>
<li><strong>Throttling:</strong> Changes based on a time based frequency. For example, it can be used using _.throttle lodash function</li>
<li><strong>Debouncing:</strong> Publish changes after a period of inactivity. For example, it can be used using _.debounce lodash function</li>
<li><strong>RequestAnimationFrame throttling:</strong> Changes based on requestAnimationFrame. For example, it can be used using raf-schd lodash function</li>
</ol>
</li>
</ol>




<ol>
<li><h3 id="how-jsx-prevents-injection-attacks-">How JSX prevents Injection Attacks?</h3>
<p>React DOM escapes any values embedded in JSX before rendering them. Thus it ensures that you can never inject anything that’s not explicitly written in your application. Everything is converted to a string before being rendered.</p>
<p>For example, you can embed user input as below,</p>
<pre><code class="lang-javascript"><span class="hljs-keyword">const</span> name = response.potentiallyMaliciousInput;
<span class="hljs-keyword">const</span> element = <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>{name}<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span>;
</code></pre>
<p>This way you can prevent XSS(Cross-site-scripting) attacks in the application.</p>
</li>
</ol>




<ol>
<li><h3 id="how-do-you-update-rendered-elements-">How do you update rendered elements?</h3>
<p>You can update UI(represented by rendered element) by passing the newly created element to ReactDOM&#39;s render method.</p>
<p>For example, lets take a ticking clock example, where it updates the time by calling render method multiple times,</p>
<pre><code class="lang-javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">tick</span>(<span class="hljs-params"></span>) </span>{
  <span class="hljs-keyword">const</span> element = (
    <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Hello, world!<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>It is {new Date().toLocaleTimeString()}.<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>
  );
  ReactDOM.render(element, <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">"root"</span>));
}

setInterval(tick, <span class="hljs-number">1000</span>);
</code></pre>
</li>
</ol>




<ol>
<li><h3 id="how-do-you-say-that-props-are-readonly-">How do you say that props are readonly?</h3>
<p>When you declare a component as a function or a class, it must never modify its own props.</p>
<p>Let us take a below capital function,</p>
<pre><code class="lang-javascript"><span class="hljs-keyword">function</span> <span class="hljs-title">capital</span>(amount, interest) {
  <span class="hljs-keyword">return</span> <span class="hljs-type">amount</span> + interest;
}
</code></pre>
<p>The above function is called “pure” because it does not attempt to change their inputs, and always return the same result for the same inputs. Hence, React has a single rule saying &quot;All React components must act like pure functions with respect to their props.&quot;</p>
</li>
</ol>




<ol>
<li><h3 id="how-do-you-say-that-state-updates-are-merged-">How do you say that state updates are merged?</h3>
<p>When you call setState() in the component, React merges the object you provide into the current state.</p>
<p>For example, let us take a facebook user with posts and comments details as state variables,</p>
<pre><code class="lang-javascript">  <span class="hljs-function"><span class="hljs-keyword">constructor</span><span class="hljs-params">(props)</span> <span class="hljs-comment">{
    super(props);
    this.state = {
      posts: [],
      comments: []
    }</span>;</span>
  }
</code></pre>
<p>Now you can update them independently with separate <code>setState()</code> calls as below,</p>
<pre><code class="lang-javascript"> <span class="hljs-selector-tag">componentDidMount</span>() {
    <span class="hljs-selector-tag">fetchPosts</span>()<span class="hljs-selector-class">.then</span>(response =&gt; {
      <span class="hljs-selector-tag">this</span><span class="hljs-selector-class">.setState</span>({
        <span class="hljs-attribute">posts</span>: response.posts
      });
    });

    <span class="hljs-selector-tag">fetchComments</span>()<span class="hljs-selector-class">.then</span>(response =&gt; {
      <span class="hljs-selector-tag">this</span><span class="hljs-selector-class">.setState</span>({
        <span class="hljs-attribute">comments</span>: response.comments
      });
    });
  }
</code></pre>
<p>As mentioned in the above code snippets, <code>this.setState({comments})</code> updates only comments variable without modifying or replacing <code>posts</code> variable.</p>
</li>
</ol>




<ol>
<li><h3 id="how-do-you-pass-arguments-to-an-event-handler-">How do you pass arguments to an event handler?</h3>
<p>During iterations or loops, it is common to pass an extra parameter to an event handler. This can be achieved through arrow functions or bind method.</p>
<p>Let us take an example of user details updated in a grid,</p>
<pre><code class="lang-javascript">&lt;<span class="hljs-selector-tag">button</span> onClick={(e) =&gt; this.updateUser(userId, e)}&gt;Update User details&lt;/button&gt;
&lt;<span class="hljs-selector-tag">button</span> onClick={this<span class="hljs-selector-class">.updateUser</span><span class="hljs-selector-class">.bind</span>(this, userId)}&gt;Update User details&lt;/button&gt;
</code></pre>
<p>In the both approaches, the synthetic argument <code>e</code> is passed as a second argument. You need to pass it explicitly for arrow functions and it will be passed automatically for <code>bind</code> method.</p>
</li>
</ol>




<ol>
<li><h3 id="how-to-prevent-component-from-rendering-">How to prevent component from rendering?</h3>
<p>You can prevent component from rendering by returning null based on specific condition. This way it can conditionally render component.</p>
<pre><code class="lang-javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Greeting</span>(<span class="hljs-params">props</span>) </span>{
  <span class="hljs-keyword">if</span> (!props.loggedIn) {
    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;
  }

  <span class="hljs-keyword">return</span> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">"greeting"</span>&gt;</span>welcome, {props.name}<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>;
}
</code></pre>
<pre><code class="lang-javascript"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span> </span>{
  constructor(props) {
    <span class="hljs-keyword">super</span>(props);
    <span class="hljs-keyword">this</span>.state = {loggedIn: <span class="hljs-literal">false</span>, name: <span class="hljs-symbol">'Joh</span>n'};
  }

  render() {
   <span class="hljs-keyword">return</span> (
       &lt;div&gt;
         <span class="hljs-comment">//Prevent component render if it is not loggedIn</span>
         &lt;<span class="hljs-type">Greeting</span> loggedIn={<span class="hljs-keyword">this</span>.state.loggedIn} /&gt;
         &lt;<span class="hljs-type">UserDetails</span> name={<span class="hljs-keyword">this</span>.state.name}&gt;
       &lt;/div&gt;
   );
  }
</code></pre>
<p>In the above example, the <code>greeting</code> component skips its rendering section by applying condition and returning null value.</p>
</li>
</ol>




<ol>
<li><h3 id="what-are-the-conditions-to-safely-use-the-index-as-a-key-">What are the conditions to safely use the index as a key?</h3>
<p>There are three conditions to make sure, it is safe use the index as a key.</p>
<ol>
<li>The list and items are static– they are not computed and do not change</li>
<li>The items in the list have no ids</li>
<li>The list is never reordered or filtered.</li>
</ol>
</li>
</ol>




<ol>
<li><h3 id="should-keys-be-globally-unique-">Should keys be globally unique?</h3>
<p>The keys used within arrays should be unique among their siblings but they don’t need to be globally unique. i.e, You can use the same keys with two different arrays.</p>
<p>For example, the below <code>Book</code> component uses two arrays with different arrays,</p>
<pre><code class="lang-javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Book</span>(<span class="hljs-params">props</span>) </span>{
  <span class="hljs-keyword">const</span> index = (
    <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span>
      {props.pages.map((page) =&gt; (
        <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">key</span>=<span class="hljs-string">{page.id}</span>&gt;</span>{page.title}<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>
      ))}
    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span>
  );
  <span class="hljs-keyword">const</span> content = props.pages.map(<span class="hljs-function">(<span class="hljs-params">page</span>) =&gt;</span> (
    <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">key</span>=<span class="hljs-string">{page.id}</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>{page.title}<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>{page.content}<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>{page.pageNumber}<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>
  ));
  <span class="hljs-keyword">return</span> (
    <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>
      {index}
      <span class="hljs-tag">&lt;<span class="hljs-name">hr</span> /&gt;</span>
      {content}
    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>
  );
}
</code></pre>
</li>
</ol>




<ol>
<li><h3 id="what-is-the-popular-choice-for-form-handling-">What is the popular choice for form handling?</h3>
<p><code>Formik</code> is a form library for react which provides solutions such as validation, keeping track of the visited fields, and handling form submission.</p>
<p>In detail, You can categorize them as follows,</p>
<ol>
<li>Getting values in and out of form state</li>
<li>Validation and error messages</li>
<li>Handling form submission</li>
</ol>
<p>It is used to create a scalable, performant, form helper with a minimal API to solve annoying stuff.</p>
</li>
</ol>




<ol>
<li><h3 id="what-are-the-advantages-of-formik-over-redux-form-library-">What are the advantages of formik over redux form library?</h3>
<p>Below are the main reasons to recommend formik over redux form library,</p>
<ol>
<li>The form state is inherently short-term and local, so tracking it in Redux (or any kind of Flux library) is unnecessary.</li>
<li>Redux-Form calls your entire top-level Redux reducer multiple times ON EVERY SINGLE KEYSTROKE. This way it increases input latency for large apps.</li>
<li>Redux-Form is 22.5 kB minified gzipped whereas Formik is 12.7 kB</li>
</ol>
</li>
</ol>




<ol>
<li><h3 id="why-are-you-not-required-to-use-inheritance-">Why are you not required to use inheritance?</h3>
In React, it is recommended to use composition over inheritance to reuse code between components. Both Props and composition give you all the flexibility you need to customize a component’s look and behavior explicitly and safely.
Whereas, If you want to reuse non-UI functionality between components, it is suggested to extract it into a separate JavaScript module. Later components import it and use that function, object, or class, without extending it.</li>
</ol>




<ol>
<li><h3 id="can-i-use-web-components-in-react-application-">Can I use web components in react application?</h3>
<p>Yes, you can use web components in a react application. Even though many developers won&#39;t use this combination, it may require especially if you are using third-party UI components that are written using Web Components.</p>
<p>For example, let us use <code>Vaadin</code> date picker web component as below,</p>
<pre><code class="lang-javascript"><span class="hljs-keyword">import</span> <span class="hljs-type">React</span>, { <span class="hljs-type">Component</span> } from <span class="hljs-string">"react"</span>;
<span class="hljs-keyword">import</span> <span class="hljs-string">"./App.css"</span>;
<span class="hljs-keyword">import</span> <span class="hljs-string">"@vaadin/vaadin-date-picker"</span>;
<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Component</span> </span>{
  render() {
    <span class="hljs-keyword">return</span> (
      &lt;div className=<span class="hljs-string">"App"</span>&gt;
        &lt;vaadin-date-picker label=<span class="hljs-string">"When were you born?"</span>&gt;&lt;/vaadin-date-picker&gt;
      &lt;/div&gt;
    );
  }
}
export <span class="hljs-keyword">default</span> <span class="hljs-type">App</span>;
</code></pre>
</li>
</ol>




<ol>
<li><h3 id="what-is-dynamic-import-">What is dynamic import?</h3>
<p>You can achieve code-splitting in your app using dynamic import.</p>
<p>Let&#39;s take an example of addition,</p>
<ol>
<li><strong>Normal Import</strong></li>
</ol>
<pre><code class="lang-javascript">import { <span class="hljs-keyword">add</span><span class="bash"> } from <span class="hljs-string">"./math"</span>;
</span>console.log(<span class="hljs-keyword">add</span><span class="bash">(10, 20));</span>
</code></pre>
<ol>
<li><strong>Dynamic Import</strong></li>
</ol>
<pre><code class="lang-javascript"><span class="hljs-keyword">import</span>(<span class="hljs-string">"./math"</span>).<span class="hljs-keyword">then</span>(<span class="hljs-function"><span class="hljs-params">(<span class="hljs-built_in">math</span>)</span> =&gt;</span> {
  console.log(<span class="hljs-built_in">math</span>.add(<span class="hljs-number">10</span>, <span class="hljs-number">20</span>));
});
</code></pre>
</li>
</ol>




<ol>
<li><h3 id="what-are-loadable-components-">What are loadable components?</h3>
<p>If you want to do code-splitting in a server rendered app, it is recommend to use Loadable Components because React.lazy and Suspense is not yet available for server-side rendering. Loadable lets you render a dynamic import as a regular component.</p>
<p>Lets take an example,</p>
<pre><code class="lang-javascript"><span class="hljs-keyword">import</span> loadable <span class="hljs-keyword">from</span> <span class="hljs-string">"@loadable/component"</span>;

<span class="hljs-keyword">const</span> OtherComponent = loadable(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">"./OtherComponent"</span>));

<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">MyComponent</span>(<span class="hljs-params"></span>) </span>{
  <span class="hljs-keyword">return</span> (
    <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-name">OtherComponent</span> /&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>
  );
}
</code></pre>
<p>Now OtherComponent will be loaded in a separated bundle</p>
</li>
</ol>




<ol>
<li><h3 id="what-is-suspense-component-">What is suspense component?</h3>
<p>If the module containing the dynamic import is not yet loaded by the time parent component renders, you must show some fallback content while you’re waiting for it to load using a loading indicator. This can be done using <strong>Suspense</strong> component.</p>
<p>For example, the below code uses suspense component,</p>
<pre><code class="lang-javascript"><span class="hljs-keyword">const</span> OtherComponent = React.lazy(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">"./OtherComponent"</span>));

<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">MyComponent</span>(<span class="hljs-params"></span>) </span>{
  <span class="hljs-keyword">return</span> (
    <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-name">Suspense</span> <span class="hljs-attr">fallback</span>=<span class="hljs-string">{</span>&lt;<span class="hljs-attr">div</span>&gt;</span>Loading...<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>}&gt;
        <span class="hljs-tag">&lt;<span class="hljs-name">OtherComponent</span> /&gt;</span>
      <span class="hljs-tag">&lt;/<span class="hljs-name">Suspense</span>&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>
  );
}
</code></pre>
<p>As mentioned in the above code, Suspense is wrapped above the lazy component.</p>
</li>
</ol>




<ol>
<li><h3 id="what-is-route-based-code-splitting-">What is route based code splitting?</h3>
<p>One of the best place to do code splitting is with routes. The entire page is going to re-render at once so users are unlikely to interact with other elements in the page at the same time. Due to this, the user experience won&#39;t be disturbed.</p>
<p>Let us take an example of route based website using libraries like React Router with React.lazy,</p>
<pre><code class="lang-javascript"><span class="hljs-keyword">import</span> { BrowserRouter as Router, Route, Switch } <span class="hljs-keyword">from</span> <span class="hljs-string">"react-router-dom"</span>;
<span class="hljs-keyword">import</span> React, { Suspense, lazy } <span class="hljs-keyword">from</span> <span class="hljs-string">"react"</span>;

const Home = lazy(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">"./routes/Home"</span>));
const About = lazy(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">"./routes/About"</span>));

const App = <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> (
  &lt;Router&gt;
    &lt;Suspense fallback={&lt;div&gt;Loading...&lt;/div&gt;}&gt;
      &lt;Switch&gt;
        &lt;Route exact path=<span class="hljs-string">"/"</span> component={Home} /&gt;
        &lt;Route path=<span class="hljs-string">"/about"</span> component={About} /&gt;
      &lt;/Switch&gt;
    &lt;/Suspense&gt;
  &lt;/Router&gt;
);
</code></pre>
<p>In the above code, the code splitting will happen at each route level.</p>
</li>
</ol>




<ol>
<li><h3 id="give-an-example-on-how-to-use-context-">Give an example on How to use context?</h3>
<p><strong>Context</strong> is designed to share data that can be considered <strong>global</strong> for a tree of React components.</p>
<p>For example, in the code below lets manually thread through a “theme” prop in order to style the Button component.</p>
<pre><code class="lang-javascript"><span class="hljs-comment">//Lets create a context with a default theme value "luna"</span>
const <span class="hljs-type">ThemeContext</span> = <span class="hljs-type">React</span>.createContext(<span class="hljs-string">"luna"</span>);
<span class="hljs-comment">// Create App component where it uses provider to pass theme value in the tree</span>
<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span> </span>{
  render() {
    <span class="hljs-keyword">return</span> (
      &lt;<span class="hljs-type">ThemeContext</span>.<span class="hljs-type">Provider</span> value=<span class="hljs-string">"nova"</span>&gt;
        &lt;<span class="hljs-type">Toolbar</span> /&gt;
      &lt;/<span class="hljs-type">ThemeContext</span>.<span class="hljs-type">Provider</span>&gt;
    );
  }
}
<span class="hljs-comment">// A middle component where you don't need to pass theme prop anymore</span>
function <span class="hljs-type">Toolbar</span>(props) {
  <span class="hljs-keyword">return</span> (
    &lt;div&gt;
      &lt;<span class="hljs-type">ThemedButton</span> /&gt;
    &lt;/div&gt;
  );
}
<span class="hljs-comment">// Lets read theme value in the button component to use</span>
<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ThemedButton</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span> </span>{
  static contextType = <span class="hljs-type">ThemeContext</span>;
  render() {
    <span class="hljs-keyword">return</span> &lt;<span class="hljs-type">Button</span> theme={<span class="hljs-keyword">this</span>.context} /&gt;;
  }
}
</code></pre>
</li>
</ol>




<ol>
<li><h3 id="what-is-the-purpose-of-default-value-in-context-">What is the purpose of default value in context?</h3>
<p>The defaultValue argument is only used when a component does not have a matching Provider above it in the tree. This can be helpful for testing components in isolation without wrapping them.</p>
<p>Below code snippet provides default theme value as Luna.</p>
<pre><code class="lang-javascript"><span class="hljs-attribute">const MyContext</span> = React.createContext(defaultValue);
</code></pre>
</li>
</ol>




<ol>
<li><h3 id="how-do-you-use-contexttype-">How do you use contextType?</h3>
<p>ContextType is used to consume the context object. The contextType property can be used in two ways,</p>
<ol>
<li><p><strong>contextType as property of class:</strong>
The contextType property on a class can be assigned a Context object created by React.createContext(). After that, you can consume the nearest current value of that Context type using this.context in any of the lifecycle methods and render function.</p>
<p>Lets assign contextType property on MyClass as below,</p>
<pre><code class="lang-javascript"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyClass</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span> </span>{
  componentDidMount() {
    let value = <span class="hljs-keyword">this</span>.context;
    <span class="hljs-comment">/* perform a side-effect at mount using the value of MyContext */</span>
  }
  componentDidUpdate() {
    let value = <span class="hljs-keyword">this</span>.context;
    <span class="hljs-comment">/* ... */</span>
  }
  componentWillUnmount() {
    let value = <span class="hljs-keyword">this</span>.context;
    <span class="hljs-comment">/* ... */</span>
  }
  render() {
    let value = <span class="hljs-keyword">this</span>.context;
    <span class="hljs-comment">/* render something based on the value of MyContext */</span>
  }
}
<span class="hljs-type">MyClass</span>.contextType = <span class="hljs-type">MyContext</span>;
</code></pre>
</li>
<li><p><strong>Static field</strong>
You can use a static class field to initialize your contextType using public class field syntax.</p>
<pre><code class="lang-javascript"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyClass</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span> </span>{
  static contextType = <span class="hljs-type">MyContext</span>;
  render() {
    let value = <span class="hljs-keyword">this</span>.context;
    <span class="hljs-comment">/* render something based on the value */</span>
  }
}
</code></pre>
</li>
</ol>
</li>
</ol>




<ol>
<li><h3 id="what-is-a-consumer-">What is a consumer?</h3>
<p>A Consumer is a React component that subscribes to context changes. It requires a function as a child which receives current context value as argument and returns a react node. The value argument passed to the function will be equal to the value prop of the closest Provider for this context above in the tree.</p>
<p>Lets take a simple example,</p>
<pre><code class="lang-javascript"><span class="hljs-params">&lt;MyContext.Consumer&gt;</span>
  {value =&gt; <span class="hljs-comment">/* render something based on the context value */</span>}
<span class="hljs-params">&lt;/MyContext.Consumer&gt;</span>
</code></pre>
</li>
</ol>




<ol>
<li><h3 id="how-do-you-solve-performance-corner-cases-while-using-context-">How do you solve performance corner cases while using context?</h3>
<p>The context uses reference identity to determine when to re-render, there are some gotchas that could trigger unintentional renders in consumers when a provider’s parent re-renders.</p>
<p>For example, the code below will re-render all consumers every time the Provider re-renders because a new object is always created for value.</p>
<pre><code class="lang-javascript"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span> </span>{
  render() {
    <span class="hljs-keyword">return</span> (
      &lt;<span class="hljs-type">Provider</span> value={{ something: <span class="hljs-string">"something"</span> }}&gt;
        &lt;<span class="hljs-type">Toolbar</span> /&gt;
      &lt;/<span class="hljs-type">Provider</span>&gt;
    );
  }
}
</code></pre>
<p>This can be solved by lifting up the value to parent state,</p>
<pre><code class="lang-javascript"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span> </span>{
  constructor(props) {
    <span class="hljs-keyword">super</span>(props);
    <span class="hljs-keyword">this</span>.state = {
      value: { something: <span class="hljs-string">"something"</span> },
    };
  }

  render() {
    <span class="hljs-keyword">return</span> (
      &lt;<span class="hljs-type">Provider</span> value={<span class="hljs-keyword">this</span>.state.value}&gt;
        &lt;<span class="hljs-type">Toolbar</span> /&gt;
      &lt;/<span class="hljs-type">Provider</span>&gt;
    );
  }
}
</code></pre>
</li>
</ol>




<ol>
<li><h3 id="what-is-the-purpose-of-forward-ref-in-hocs-">What is the purpose of forward ref in HOCs?</h3>
<p>Refs will not get passed through because ref is not a prop. It is handled differently by React just like <strong>key</strong>. If you add a ref to a HOC, the ref will refer to the outermost container component, not the wrapped component. In this case, you can use Forward Ref API. For example, we can explicitly forward refs to the inner FancyButton component using the React.forwardRef API.</p>
<p>The below HOC logs all props,</p>
<pre><code class="lang-javascript">function logProps(<span class="hljs-type">Component</span>) {
  <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LogProps</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span> </span>{
    componentDidUpdate(prevProps) {
      console.log(<span class="hljs-string">"old props:"</span>, prevProps);
      console.log(<span class="hljs-string">"new props:"</span>, <span class="hljs-keyword">this</span>.props);
    }

    render() {
      const { forwardedRef, ...rest } = <span class="hljs-keyword">this</span>.props;

      <span class="hljs-comment">// Assign the custom prop "forwardedRef" as a ref</span>
      <span class="hljs-keyword">return</span> &lt;<span class="hljs-type">Component</span> ref={forwardedRef} {...rest} /&gt;;
    }
  }

  <span class="hljs-keyword">return</span> <span class="hljs-type">React</span>.forwardRef((props, ref) =&gt; {
    <span class="hljs-keyword">return</span> &lt;<span class="hljs-type">LogProps</span> {...props} forwardedRef={ref} /&gt;;
  });
}
</code></pre>
<p>Let&#39;s use this HOC to log all props that get passed to our “fancy button” component,</p>
<pre><code class="lang-javascript"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FancyButton</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span> </span>{
  focus() {
    <span class="hljs-comment">// ...</span>
  }

  <span class="hljs-comment">// ...</span>
}
export <span class="hljs-keyword">default</span> logProps(<span class="hljs-type">FancyButton</span>);
</code></pre>
<p>Now let&#39;s create a ref and pass it to FancyButton component. In this case, you can set focus to button element.</p>
<pre><code class="lang-javascript"><span class="hljs-keyword">import</span> <span class="hljs-type">FancyButton</span> <span class="hljs-keyword">from</span> <span class="hljs-string">"./FancyButton"</span>;

<span class="hljs-keyword">const</span> <span class="hljs-keyword">ref</span> = <span class="hljs-type">React</span>.createRef();
<span class="hljs-keyword">ref</span>.current.focus();
&lt;<span class="hljs-type">FancyButton</span> label=<span class="hljs-string">"Click Me"</span> handleClick={handleClick} <span class="hljs-keyword">ref</span>={<span class="hljs-keyword">ref</span>} /&gt;;
</code></pre>
</li>
</ol>




<ol>
<li><h3 id="is-ref-argument-available-for-all-functions-or-class-components-">Is ref argument available for all functions or class components?</h3>
Regular function or class components don’t receive the ref argument, and ref is not available in props either. The second ref argument only exists when you define a component with React.forwardRef call.</li>
</ol>




<ol>
<li><h3 id="why-do-you-need-additional-care-for-component-libraries-while-using-forward-refs-">Why do you need additional care for component libraries while using forward refs?</h3>
When you start using forwardRef in a component library, you should treat it as a breaking change and release a new major version of your library. This is because your library likely has a different behavior such as what refs get assigned to, and what types are exported. These changes can break apps and other libraries that depend on the old behavior.</li>
</ol>




<ol>
<li><h3 id="how-to-create-react-class-components-without-es6-">How to create react class components without ES6?</h3>
<p>If you don’t use ES6 then you may need to use the create-react-class module instead. For default props, you need to define getDefaultProps() as a function on the passed object. Whereas for initial state, you have to provide a separate getInitialState method that returns the initial state.</p>
<pre><code class="lang-javascript"><span class="hljs-keyword">var</span> Greeting = createReactClass({
  <span class="hljs-attr">getDefaultProps</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{
    <span class="hljs-keyword">return</span> {
      <span class="hljs-attr">name</span>: <span class="hljs-string">"Jhohn"</span>,
    };
  },
  <span class="hljs-attr">getInitialState</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{
    <span class="hljs-keyword">return</span> { <span class="hljs-attr">message</span>: <span class="hljs-keyword">this</span>.props.message };
  },
  <span class="hljs-attr">handleClick</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{
    <span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">this</span>.state.message);
  },
  <span class="hljs-attr">render</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{
    <span class="hljs-keyword">return</span> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Hello, {this.props.name}<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span>;
  },
});
</code></pre>
<p><strong>Note:</strong> If you use createReactClass then auto binding is available for all methods. i.e, You don&#39;t need to use <code>.bind(this)</code> with in constructor for event handlers.</p>
</li>
</ol>




<ol>
<li><h3 id="is-it-possible-to-use-react-without-jsx-">Is it possible to use react without JSX?</h3>
<p>Yes, JSX is not mandatory for using React. Actually it is convenient when you don’t want to set up compilation in your build environment. Each JSX element is just syntactic sugar for calling <code>React.createElement(component, props, ...children)</code>.</p>
<p>For example, let us take a greeting example with JSX,</p>
<pre><code class="lang-javascript"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Greeting</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span> </span>{
  render() {
    <span class="hljs-keyword">return</span> &lt;div&gt;<span class="hljs-type">Hello</span> {<span class="hljs-keyword">this</span>.props.message}&lt;/div&gt;;
  }
}

<span class="hljs-type">ReactDOM</span>.render(
  &lt;<span class="hljs-type">Greeting</span> message=<span class="hljs-string">"World"</span> /&gt;,
  document.getElementById(<span class="hljs-string">"root"</span>)
);
</code></pre>
<p>You can write the same code without JSX as below,</p>
<pre><code class="lang-javascript"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Greeting</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span> </span>{
  render() {
    <span class="hljs-keyword">return</span> <span class="hljs-type">React</span>.createElement(<span class="hljs-string">"div"</span>, <span class="hljs-literal">null</span>, `<span class="hljs-type">Hello</span> ${<span class="hljs-keyword">this</span>.props.message}`);
  }
}

<span class="hljs-type">ReactDOM</span>.render(
  <span class="hljs-type">React</span>.createElement(<span class="hljs-type">Greeting</span>, { message: <span class="hljs-string">"World"</span> }, <span class="hljs-literal">null</span>),
  document.getElementById(<span class="hljs-string">"root"</span>)
);
</code></pre>
</li>
</ol>




<ol>
<li><h3 id="what-is-diffing-algorithm-">What is diffing algorithm?</h3>
<p>React needs to use algorithms to find out how to efficiently update the UI to match the most recent tree. The diffing algorithms is generating the minimum number of operations to transform one tree into another. However, the algorithms have a complexity in the order of O(n³) where n is the number of elements in the tree.</p>
<p>In this case, displaying 1000 elements would require in the order of one billion comparisons. This is far too expensive. Instead, React implements a heuristic O(n) algorithm based on two assumptions:</p>
<ol>
<li>Two elements of different types will produce different trees.</li>
<li>The developer can hint at which child elements may be stable across different renders with a key prop.</li>
</ol>
</li>
</ol>




<ol>
<li><h3 id="what-are-the-rules-covered-by-diffing-algorithm-">What are the rules covered by diffing algorithm?</h3>
<p>When diffing two trees, React first compares the two root elements. The behavior is different depending on the types of the root elements. It covers the below rules during reconciliation algorithm,</p>
<ol>
<li><strong>Elements Of Different Types:</strong>
Whenever the root elements have different types, React will tear down the old tree and build the new tree from scratch. For example, elements <a> to <img>, or from <Article> to <Comment> of different types lead a full rebuild.</li>
<li><p><strong>DOM Elements Of The Same Type:</strong>
When comparing two React DOM elements of the same type, React looks at the attributes of both, keeps the same underlying DOM node, and only updates the changed attributes. Lets take an example with same DOM elements except className attribute,</p>
<pre><code class="lang-javascript">&lt;<span class="hljs-selector-tag">div</span> className=<span class="hljs-string">"show"</span> title=<span class="hljs-string">"ReactJS"</span> /&gt;

&lt;<span class="hljs-selector-tag">div</span> className=<span class="hljs-string">"hide"</span> title=<span class="hljs-string">"ReactJS"</span> /&gt;
</code></pre>
</li>
<li><p><strong>Component Elements Of The Same Type:</strong>
When a component updates, the instance stays the same, so that state is maintained across renders. React updates the props of the underlying component instance to match the new element, and calls componentWillReceiveProps() and componentWillUpdate() on the underlying instance. After that, the render() method is called and the diff algorithm recurses on the previous result and the new result.</p>
</li>
<li><p><strong>Recursing On Children:</strong>
when recursing on the children of a DOM node, React just iterates over both lists of children at the same time and generates a mutation whenever there’s a difference. For example, when adding an element at the end of the children, converting between these two trees works well.</p>
<pre><code class="lang-javascript">&lt;ul&gt;
  &lt;<span class="hljs-built_in">li</span>&gt;<span class="hljs-built_in">first</span>&lt;/<span class="hljs-built_in">li</span>&gt;
  &lt;<span class="hljs-built_in">li</span>&gt;<span class="hljs-built_in">second</span>&lt;/<span class="hljs-built_in">li</span>&gt;
&lt;/ul&gt;

&lt;ul&gt;
  &lt;<span class="hljs-built_in">li</span>&gt;<span class="hljs-built_in">first</span>&lt;/<span class="hljs-built_in">li</span>&gt;
  &lt;<span class="hljs-built_in">li</span>&gt;<span class="hljs-built_in">second</span>&lt;/<span class="hljs-built_in">li</span>&gt;
  &lt;<span class="hljs-built_in">li</span>&gt;<span class="hljs-built_in">third</span>&lt;/<span class="hljs-built_in">li</span>&gt;
&lt;/ul&gt;
</code></pre>
</li>
<li><p><strong>Handling keys:</strong>
React supports a key attribute. When children have keys, React uses the key to match children in the original tree with children in the subsequent tree. For example, adding a key can make the tree conversion efficient,</p>
</li>
</ol>
<pre><code class="lang-javascript">&lt;ul&gt;
  &lt;<span class="hljs-built_in">li</span> <span class="hljs-built_in">key</span>=<span class="hljs-string">"2015"</span>&gt;Duke&lt;/<span class="hljs-built_in">li</span>&gt;
  &lt;<span class="hljs-built_in">li</span> <span class="hljs-built_in">key</span>=<span class="hljs-string">"2016"</span>&gt;Villanova&lt;/<span class="hljs-built_in">li</span>&gt;
&lt;/ul&gt;

&lt;ul&gt;
  &lt;<span class="hljs-built_in">li</span> <span class="hljs-built_in">key</span>=<span class="hljs-string">"2014"</span>&gt;Connecticut&lt;/<span class="hljs-built_in">li</span>&gt;
  &lt;<span class="hljs-built_in">li</span> <span class="hljs-built_in">key</span>=<span class="hljs-string">"2015"</span>&gt;Duke&lt;/<span class="hljs-built_in">li</span>&gt;
  &lt;<span class="hljs-built_in">li</span> <span class="hljs-built_in">key</span>=<span class="hljs-string">"2016"</span>&gt;Villanova&lt;/<span class="hljs-built_in">li</span>&gt;
&lt;/ul&gt;
</code></pre>
</li>
</ol>




<ol>
<li><h3 id="when-do-you-need-to-use-refs-">When do you need to use refs?</h3>
<p>There are few use cases to go for refs,</p>
<ol>
<li>Managing focus, text selection, or media playback.</li>
<li>Triggering imperative animations.</li>
<li>Integrating with third-party DOM libraries.</li>
</ol>
</li>
</ol>




<ol>
<li><h3 id="must-prop-be-named-as-render-for-render-props-">Must prop be named as render for render props?</h3>
<p>Even though the pattern named render props, you don’t have to use a prop named render to use this pattern. i.e, Any prop that is a function that a component uses to know what to render is technically a “render prop”. Lets take an example with the children prop for render props,</p>
<pre><code class="lang-javascript"><span class="hljs-tag">&lt;<span class="hljs-name">Mouse</span>
  <span class="hljs-attr">children</span>=<span class="hljs-string">{(mouse)</span> =&gt;</span> (
    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>
      The mouse position is {mouse.x}, {mouse.y}
    <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>
  )}
/&gt;
</code></pre>
<p>Actually children prop doesn’t need to be named in the list of “attributes” in JSX element. Instead, you can keep it directly inside element,</p>
<pre><code class="lang-javascript"><span class="hljs-params">&lt;Mouse&gt;</span>
  {(mouse) =&gt; (
    <span class="hljs-params">&lt;p&gt;</span>
      The mouse position <span class="hljs-class">is </span>{mouse.x}, {mouse.y}
    <span class="hljs-params">&lt;/p&gt;</span>
  )}
<span class="hljs-params">&lt;/Mouse&gt;</span>
</code></pre>
<p>While using this above technique(without any name), explicitly state that children should be a function in your propTypes.</p>
<pre><code class="lang-javascript">Mouse.propTypes = {
  <span class="hljs-attribute">children</span>: PropTypes<span class="hljs-variable">.func</span><span class="hljs-variable">.isRequired</span>,
};
</code></pre>
</li>
</ol>




<ol>
<li><h3 id="what-are-the-problems-of-using-render-props-with-pure-components-">What are the problems of using render props with pure components?</h3>
If you create a function inside a render method, it negates the purpose of pure component. Because the shallow prop comparison will always return false for new props, and each render in this case will generate a new value for the render prop. You can solve this issue by defining the render function as instance method.</li>
</ol>




<ol>
<li><h3 id="how-do-you-create-hoc-using-render-props-">How do you create HOC using render props?</h3>
<p>You can implement most higher-order components (HOC) using a regular component with a render prop. For example, if you would prefer to have a withMouse HOC instead of a <Mouse> component, you could easily create one using a regular <Mouse> with a render prop.</p>
<pre><code class="lang-javascript">function withMouse(<span class="hljs-type">Component</span>) {
  <span class="hljs-keyword">return</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span> </span>{
    render() {
      <span class="hljs-keyword">return</span> (
        &lt;<span class="hljs-type">Mouse</span>
          render={(mouse) =&gt; &lt;<span class="hljs-type">Component</span> {...<span class="hljs-keyword">this</span>.props} mouse={mouse} /&gt;}
        /&gt;
      );
    }
  };
}
</code></pre>
<p>This way render props gives the flexibility of using either pattern.</p>
</li>
</ol>




<ol>
<li><h3 id="what-is-windowing-technique-">What is windowing technique?</h3>
Windowing is a technique that only renders a small subset of your rows at any given time, and can dramatically reduce the time it takes to re-render the components as well as the number of DOM nodes created. If your application renders long lists of data then this technique is recommended. Both react-window and react-virtualized are popular windowing libraries which provides several reusable components for displaying lists, grids, and tabular data.</li>
</ol>




<ol>
<li><h3 id="how-do-you-print-falsy-values-in-jsx-">How do you print falsy values in JSX?</h3>
<p>The falsy values such as false, null, undefined, and true are valid children but they don&#39;t render anything. If you still want to display them then you need to convert it to string. Let&#39;s take an example on how to convert to a string,</p>
<pre><code class="lang-javascript">&lt;<span class="hljs-keyword">div</span>&gt;My JavaScript variable <span class="hljs-keyword">is</span> {String(myVariable)}.&lt;/<span class="hljs-keyword">div</span>&gt;
</code></pre>
</li>
</ol>




<ol>
<li><h3 id="what-is-the-typical-use-case-of-portals-">What is the typical use case of portals?</h3>
<p>React portals are very useful when a parent component has overflow: hidden or has properties that affect the stacking context (e.g. z-index, position, opacity) and you need to visually “break out” of its container.</p>
<p>For example, dialogs, global message notifications, hovercards, and tooltips.</p>
</li>
</ol>




<ol>
<li><h3 id="how-do-you-set-default-value-for-uncontrolled-component-">How do you set default value for uncontrolled component?</h3>
<p>In React, the value attribute on form elements will override the value in the DOM. With an uncontrolled component, you might want React to specify the initial value, but leave subsequent updates uncontrolled. To handle this case, you can specify a <strong>defaultValue</strong> attribute instead of <strong>value</strong>.</p>
<pre><code class="lang-javascript">render() {
  <span class="hljs-keyword">return</span> (
    &lt;<span class="hljs-keyword">form</span> onSubmit={this.handleSubmit}&gt;
      &lt;<span class="hljs-keyword">label</span>&gt;
        User Name:
        &lt;<span class="hljs-keyword">input</span>
          defaultValue=<span class="hljs-string">"John"</span>
          <span class="hljs-keyword">type</span>=<span class="hljs-string">"text"</span>
          ref={this.<span class="hljs-keyword">input</span>} /&gt;
      &lt;/<span class="hljs-keyword">label</span>&gt;
      &lt;<span class="hljs-keyword">input</span> <span class="hljs-keyword">type</span>=<span class="hljs-string">"submit"</span> value=<span class="hljs-string">"Submit"</span> /&gt;
    &lt;/<span class="hljs-keyword">form</span>&gt;
  );
}
</code></pre>
<p>The same applies for <code>select</code> and <code>textArea</code> inputs. But you need to use <strong>defaultChecked</strong> for <code>checkbox</code> and <code>radio</code> inputs.</p>
</li>
</ol>




<ol>
<li><h3 id="what-is-your-favorite-react-stack-">What is your favorite React stack?</h3>
Even though the tech stack varies from developer to developer, the most popular stack is used in react boilerplate project code. It mainly uses Redux and redux-saga for state management and asynchronous side-effects, react-router for routing purpose, styled-components for styling react components, axios for invoking REST api, and other supported stack such as webpack, reselect, ESNext, Babel.
You can clone the project <a href="https://github.com/react-boilerplate/react-boilerplate">https://github.com/react-boilerplate/react-boilerplate</a> and start working on any new react project.</li>
</ol>




<ol>
<li><h3 id="what-is-the-difference-between-real-dom-and-virtual-dom-">What is the difference between Real DOM and Virtual DOM?</h3>
<p>Below are the main differences between Real DOM and Virtual DOM,</p>
<p>| Real DOM                             | Virtual DOM                          |
| ------------------------------------ | ------------------------------------ |
| Updates are slow                     | Updates are fast                     |
| DOM manipulation is very expensive.  | DOM manipulation is very easy        |
| You can update HTML directly.        | You Can’t directly update HTML       |
| It causes too much of memory wastage | There is no memory wastage           |
| Creates a new DOM if element updates | It updates the JSX if element update |</p>
</li>
</ol>




<ol>
<li><h3 id="how-to-add-bootstrap-to-a-react-application-">How to add Bootstrap to a react application?</h3>
<p>Bootstrap can be added to your React app in a three possible ways,</p>
<ol>
<li>Using the Bootstrap CDN:
This is the easiest way to add bootstrap. Add both bootstrap CSS and JS resources in a head tag.</li>
<li>Bootstrap as Dependency:
If you are using a build tool or a module bundler such as Webpack, then this is the preferred option for adding Bootstrap to your React application<pre><code class="lang-javascript">npm <span class="hljs-keyword">install</span> bootstrap
</code></pre>
</li>
<li>React Bootstrap Package:
In this case, you can add Bootstrap to our React app is by using a package that has rebuilt Bootstrap components to work particularly as React components. Below packages are popular in this category,<ol>
<li>react-bootstrap</li>
<li>reactstrap</li>
</ol>
</li>
</ol>
</li>
</ol>




<ol>
<li><h3 id="can-you-list-down-top-websites-or-applications-using-react-as-front-end-framework-">Can you list down top websites or applications using react as front end framework?</h3>
<p>Below are the <code>top 10 websites</code> using React as their front-end framework,</p>
<ol>
<li>Facebook</li>
<li>Uber</li>
<li>Instagram</li>
<li>WhatsApp</li>
<li>Khan Academy</li>
<li>Airbnb</li>
<li>Dropbox</li>
<li>Flipboard</li>
<li>Netflix</li>
<li>PayPal</li>
</ol>
</li>
</ol>




<ol>
<li><h3 id="is-it-recommended-to-use-css-in-js-technique-in-react-">Is it recommended to use CSS In JS technique in React?</h3>
React does not have any opinion about how styles are defined but if you are a beginner then good starting point is to define your styles in a separate *.css file as usual and refer to them using className. This functionality is not part of React but came from third-party libraries. But If you want to try a different approach(CSS-In-JS) then styled-components library is a good option.</li>
</ol>




<ol>
<li><h3 id="do-i-need-to-rewrite-all-my-class-components-with-hooks-">Do I need to rewrite all my class components with hooks?</h3>
No. But you can try Hooks in a few components(or new components) without rewriting any existing code. Because there are no plans to remove classes in ReactJS.</li>
</ol>




<ol>
<li><h3 id="how-to-fetch-data-with-react-hooks-">How to fetch data with React Hooks?</h3>
<p>The effect hook called <code>useEffect</code> can be used to fetch data from an API and to set the data in the local state of the component with the useState hook’s update function.</p>
<p>Here is an example of fetching a list of react articles from an API using fetch.</p>
<pre><code class="lang-javascript"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">"react"</span>;

<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">App</span>(<span class="hljs-params"></span>) </span>{
  <span class="hljs-keyword">const</span> [data, setData] = React.useState({ <span class="hljs-attr">hits</span>: [] });

  React.useEffect(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> {
   fetch(<span class="hljs-string">"http://hn.algolia.com/api/v1/search?query=react"</span>)
   .then(<span class="hljs-function"><span class="hljs-params">response</span> =&gt;</span> response.json())
   .then(<span class="hljs-function"><span class="hljs-params">data</span> =&gt;</span> setData(data))
  }, []);

  <span class="hljs-keyword">return</span> (
    <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span>
      {data.hits.map((item) =&gt; (
        <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">key</span>=<span class="hljs-string">{item.objectID}</span>&gt;</span>
          <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">{item.url}</span>&gt;</span>{item.title}<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span>
        <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>
      ))}
    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span>
  );
}

<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> App;
</code></pre>
<p>A popular way to simplify this is by using the library axios.</p>
<p>We provided an empty array as second argument to the useEffect hook to avoid activating it on component updates. This way, it only fetches on component mount.</p>
</li>
</ol>




<ol>
<li><h3 id="is-hooks-cover-all-use-cases-for-classes-">Is Hooks cover all use cases for classes?</h3>
Hooks doesn&#39;t cover all use cases of classes but there is a plan to add them soon. Currently there are no Hook equivalents to the uncommon <strong>getSnapshotBeforeUpdate</strong> and <strong>componentDidCatch</strong> lifecycles yet.</li>
</ol>




<ol>
<li><h3 id="what-is-the-stable-release-for-hooks-support-">What is the stable release for hooks support?</h3>
<p>React includes a stable implementation of React Hooks in 16.8 release for below packages</p>
<ol>
<li>React DOM</li>
<li>React DOM Server</li>
<li>React Test Renderer</li>
<li>React Shallow Renderer</li>
</ol>
</li>
</ol>




<ol>
<li><h3 id="why-do-we-use-array-destructuring-square-brackets-notation-in-usestate-">Why do we use array destructuring (square brackets notation) in <code>useState</code>?</h3>
<p>When we declare a state variable with <code>useState</code>, it returns a pair — an array with two items. The first item is the current value, and the second is a function that updates the value. Using [0] and [1] to access them is a bit confusing because they have a specific meaning. This is why we use array destructuring instead.</p>
<p>For example, the array index access would look as follows:</p>
<pre><code class="lang-javascript">var userStateVariable = useState(<span class="hljs-string">"userProfile"</span>); // Returns an<span class="hljs-built_in"> array </span>pair
var user = userStateVariable[0]; // Access first item
var setUser = userStateVariable[1]; // Access second item
</code></pre>
<p>Whereas with array destructuring the variables can be accessed as follows:</p>
<pre><code class="lang-javascript">const [<span class="hljs-keyword">user</span>, <span class="hljs-built_in">set</span>User] = useState(<span class="hljs-string">"userProfile"</span>);
</code></pre>




</li>
<li><h3 id="what-are-the-sources-used-for-introducing-hooks-">What are the sources used for introducing hooks?</h3>
<p>Hooks got the ideas from several different sources. Below are some of them,</p>
<ol>
<li>Previous experiments with functional APIs in the react-future repository</li>
<li>Community experiments with render prop APIs such as Reactions Component</li>
<li>State variables and state cells in DisplayScript.</li>
<li>Subscriptions in Rx.</li>
<li>Reducer components in ReasonReact.</li>
</ol>
</li>
</ol>




<ol>
<li><h3 id="how-do-you-access-imperative-api-of-web-components-">How do you access imperative API of web components?</h3>
Web Components often expose an imperative API to implement its functions. You will need to use a <strong>ref</strong> to interact with the DOM node directly if you want to access imperative API of a web component. But if you are using third-party Web Components, the best solution is to write a React component that behaves as a <strong>wrapper</strong> for your Web Component.</li>
</ol>




<ol>
<li><h3 id="what-is-formik-">What is formik?</h3>
<p>Formik is a small react form library that helps you with the three major problems,</p>
<ol>
<li>Getting values in and out of form state</li>
<li>Validation and error messages</li>
<li>Handling form submission</li>
</ol>
</li>
</ol>




<ol>
<li><h3 id="what-are-typical-middleware-choices-for-handling-asynchronous-calls-in-redux-">What are typical middleware choices for handling asynchronous calls in Redux?</h3>
Some of the popular middleware choices for handling asynchronous calls in Redux eco system are <code>Redux Thunk, Redux Promise, Redux Saga</code>.</li>
</ol>




<ol>
<li><h3 id="do-browsers-understand-jsx-code-">Do browsers understand JSX code?</h3>
No, browsers can&#39;t understand JSX code. You need a transpiler to convert your JSX to regular Javascript that browsers can understand. The most widely used transpiler right now is Babel.</li>
</ol>




<ol>
<li><h3 id="describe-about-data-flow-in-react-">Describe about data flow in react?</h3>
React implements one-way reactive data flow using props which reduce boilerplate and is easier to understand than traditional two-way data binding.</li>
</ol>




<ol>
<li><h3 id="what-is-react-scripts-">What is react scripts?</h3>
The <code>react-scripts</code> package is a set of scripts from the create-react-app starter pack which helps you kick off projects without configuring. The <code>react-scripts start</code> command sets up the development environment and starts a server, as well as hot module reloading.</li>
</ol>




<ol>
<li><h3 id="what-are-the-features-of-create-react-app-">What are the features of create react app?</h3>
<p>Below are the list of some of the features provided by create react app.</p>
<ol>
<li>React, JSX, ES6, Typescript and Flow syntax support.</li>
<li>Autoprefixed CSS</li>
<li>CSS Reset/Normalize</li>
<li>A live development server</li>
<li>A fast interactive unit test runner with built-in support for coverage reporting</li>
<li>A build script to bundle JS, CSS, and images for production, with hashes and sourcemaps</li>
<li>An offline-first service worker and a web app manifest, meeting all the Progressive Web App criteria.</li>
</ol>
</li>
</ol>




<ol>
<li><h3 id="what-is-the-purpose-of-rendertonodestream-method-">What is the purpose of renderToNodeStream method?</h3>
The <code>ReactDOMServer#renderToNodeStream</code> method is used to generate HTML on the server and send the markup down on the initial request for faster page loads. It also helps search engines to crawl your pages easily for SEO purposes.
<strong>Note:</strong> Remember this method is not available in the browser but only server.</li>
</ol>




<ol>
<li><h3 id="what-is-mobx-">What is MobX?</h3>
MobX is a simple, scalable and battle tested state management solution for applying functional reactive programming (TFRP). For reactJs application, you need to install below packages,<pre><code class="lang-bash">npm <span class="hljs-keyword">install</span> mobx <span class="hljs-comment">--save</span>
npm <span class="hljs-keyword">install</span> mobx-react <span class="hljs-comment">--save</span>
</code></pre>
</li>
</ol>




<ol>
<li><h3 id="what-are-the-differences-between-redux-and-mobx-">What are the differences between Redux and MobX?</h3>
<p>Below are the main differences between Redux and MobX,</p>
<p>| Topic         | Redux                                                         | MobX                                                                   |
| ------------- | ------------------------------------------------------------- | ---------------------------------------------------------------------- |
| Definition    | It is a javascript library for managing the application state | It is a library for reactively managing the state of your applications |
| Programming   | It is mainly written in ES6                                   | It is written in JavaScript(ES5)                                       |
| Data Store    | There is only one large store exist for data storage          | There is more than one store for storage                               |
| Usage         | Mainly used for large and complex applications                | Used for simple applications                                           |
| Performance   | Need to be improved                                           | Provides better performance                                            |
| How it stores | Uses JS Object to store                                       | Uses observable to store the data                                      |</p>
</li>
</ol>




<ol>
<li><h3 id="should-i-learn-es6-before-learning-reactjs-">Should I learn ES6 before learning ReactJS?</h3>
<p>No, you don’t have to learn es2015/es6 to learn react. But you may find many resources or React ecosystem uses ES6 extensively. Let&#39;s see some of the frequently used ES6 features,</p>
<ol>
<li><p><strong>Destructuring:</strong> To get props and use them in a component</p>
<pre><code class="lang-javascript"><span class="hljs-comment">// in es 5</span>
<span class="hljs-keyword">var</span> someData = <span class="hljs-keyword">this</span>.props.someData;
<span class="hljs-keyword">var</span> dispatch = <span class="hljs-keyword">this</span>.props.dispatch;

<span class="hljs-comment">// in es6</span>
const { someData, dispatch } = <span class="hljs-keyword">this</span>.props;
</code></pre>
</li>
<li><p>Spread operator: Helps in passing props down into a component</p>
<pre><code class="lang-javascript"><span class="hljs-comment">// in es 5</span>
&lt;SomeComponent someData={this<span class="hljs-selector-class">.props</span><span class="hljs-selector-class">.someData</span>} dispatch={this<span class="hljs-selector-class">.props</span><span class="hljs-selector-class">.dispatch</span>} /&gt;

<span class="hljs-comment">// in es6</span>
&lt;SomeComponent {..<span class="hljs-selector-class">.this</span><span class="hljs-selector-class">.props</span>} /&gt;
</code></pre>
</li>
<li><p>Arrow functions: Makes compact syntax</p>
<pre><code class="lang-javascript"><span class="hljs-comment">// es 5</span>
<span class="hljs-keyword">var</span> users = usersList.map(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">user</span>) </span>{
  <span class="hljs-keyword">return</span> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>{user.name}<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span>;
});
<span class="hljs-comment">// es 6</span>
<span class="hljs-keyword">const</span> users = usersList.map(<span class="hljs-function">(<span class="hljs-params">user</span>) =&gt;</span> &lt;li&gt;{user.name}&lt;<span class="hljs-regexp">/li&gt;);</span>
</code></pre>
</li>
</ol>
</li>
</ol>




<ol>
<li><h3 id="what-is-concurrent-rendering-">What is Concurrent Rendering?</h3>
<p>The Concurrent rendering makes React apps to be more responsive by rendering component trees without blocking the main UI thread. It allows React to interrupt a long-running render to handle a high-priority event. i.e, When you enabled concurrent Mode, React will keep an eye on other tasks that need to be done, and if there&#39;s something with a higher priority it will pause what it is currently rendering and let the other task finish first. You can enable this in two ways,</p>
<pre><code class="lang-javascript"><span class="hljs-comment">// 1. Part of an app by wrapping with ConcurrentMode</span>
<span class="hljs-params">&lt;React.unstable_ConcurrentMode&gt;</span>
  <span class="hljs-params">&lt;Something /&gt;</span>
<span class="hljs-params">&lt;/React.unstable_ConcurrentMode&gt;</span>;

<span class="hljs-comment">// 2. Whole app using createRoot</span>
ReactDOM.unstable_createRoot(domNode).render(<span class="hljs-params">&lt;App /&gt;</span>);
</code></pre>
</li>
</ol>




<ol>
<li><h3 id="what-is-the-difference-between-async-mode-and-concurrent-mode-">What is the difference between async mode and concurrent mode?</h3>
Both refers the same thing. Previously concurrent Mode being referred to as &quot;Async Mode&quot; by React team. The name has been changed to highlight React’s ability to perform work on different priority levels. So it avoids the confusion from other approaches to Async Rendering.</li>
</ol>




<ol>
<li><h3 id="can-i-use-javascript-urls-in-react16-9-">Can I use javascript urls in react16.9?</h3>
<p>Yes, you can use javascript: URLs but it will log a warning in the console. Because URLs starting with javascript: are dangerous by including unsanitized output in a tag like <code>&lt;a href&gt;</code> and create a security hole.</p>
<pre><code class="lang-javascript">const companyProfile = {
<span class="hljs-symbol">  website:</span> <span class="hljs-string">"javascript: alert('Your website is hacked')"</span>,
};
<span class="hljs-comment">// It will log a warning</span>
<span class="hljs-params">&lt;a href={companyProfile.website}&gt;</span>More details<span class="hljs-params">&lt;/a&gt;</span>;
</code></pre>
<p>Remember that the future versions will throw an error for javascript URLs.</p>
</li>
</ol>




<ol>
<li><h3 id="what-is-the-purpose-of-eslint-plugin-for-hooks-">What is the purpose of eslint plugin for hooks?</h3>
<p>The ESLint plugin enforces rules of Hooks to avoid bugs. It assumes that any function starting with ”use” and a capital letter right after it is a Hook. In particular, the rule enforces that,</p>
<ol>
<li>Calls to Hooks are either inside a PascalCase function (assumed to be a component) or another useSomething function (assumed to be a custom Hook).</li>
<li>Hooks are called in the same order on every render.</li>
</ol>
</li>
</ol>




<ol>
<li><h3 id="what-is-the-difference-between-imperative-and-declarative-in-react-">What is the difference between Imperative and Declarative in React?</h3>
<p>Imagine a simple UI component, such as a &quot;Like&quot; button. When you tap it, it turns blue if it was previously grey, and grey if it was previously blue.</p>
<p>The imperative way of doing this would be:</p>
<pre><code class="lang-javascript"><span class="hljs-keyword">if</span> <span class="hljs-comment">(user.likes()</span>) {
  <span class="hljs-keyword">if</span> <span class="hljs-comment">(hasBlue()</span>) {
    removeBlue<span class="hljs-comment">()</span>;
    addGrey<span class="hljs-comment">()</span>;
  } else {
    removeGrey<span class="hljs-comment">()</span>;
    addBlue<span class="hljs-comment">()</span>;
  }
}
</code></pre>
<p>Basically, you have to check what is currently on the screen and handle all the changes necessary to redraw it with the current state, including undoing the changes from the previous state. You can imagine how complex this could be in a real-world scenario.</p>
<p>In contrast, the declarative approach would be:</p>
<pre><code class="lang-javascript"><span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.state.liked) {
  <span class="hljs-keyword">return</span> &lt;blueLike /&gt;;
} <span class="hljs-keyword">else</span> {
  <span class="hljs-keyword">return</span> &lt;greyLike /&gt;;
}
</code></pre>
<p>Because the declarative approach separates concerns, this part of it only needs to handle how the UI should look in a sepecific state, and is therefore much simpler to understand.</p>
</li>
</ol>




<ol>
<li><h3 id="what-are-the-benefits-of-using-typescript-with-reactjs-">What are the benefits of using typescript with reactjs?</h3>
<p>Below are some of the benefits of using typescript with Reactjs,</p>
<ol>
<li>It is possible to use latest JavaScript features</li>
<li>Use of interfaces for complex type definitions</li>
<li>IDEs such as VS Code was made for TypeScript</li>
<li>Avoid bugs with the ease of readability and Validation</li>
</ol>




</li>
<li><h3 id="how-do-you-make-sure-that-user-remains-authenticated-on-page-refresh-while-using-context-api-state-management-">How do you make sure that user remains authenticated on page refresh while using Context API State Management?</h3>
<p>When a user logs in and reload, to persist the state generally we add the load user action in the useEffect hooks in the main App.js. While using Redux, loadUser action can be easily accessed.</p>
</li>
</ol>
<p><strong>App.js</strong></p>
<pre><code class="lang-js">import { <span class="hljs-built_in">load</span>User } <span class="hljs-keyword">from</span> <span class="hljs-string">"../actions/auth"</span>;
store.dispatch(<span class="hljs-built_in">load</span>User());
</code></pre>
<ul>
<li>But while using <strong>Context API</strong>, to access context in App.js, wrap the AuthState in index.js so that App.js can access the auth context. Now whenever the page reloads, no matter what route you are on, the user will be authenticated as <strong>loadUser</strong> action will be triggered on each re-render.</li>
</ul>
<p><strong>index.js</strong></p>
<pre><code class="lang-js"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">"react"</span>;
<span class="hljs-keyword">import</span> ReactDOM <span class="hljs-keyword">from</span> <span class="hljs-string">"react-dom"</span>;
<span class="hljs-keyword">import</span> App <span class="hljs-keyword">from</span> <span class="hljs-string">"./App"</span>;
<span class="hljs-keyword">import</span> AuthState <span class="hljs-keyword">from</span> <span class="hljs-string">"./context/auth/AuthState"</span>;

ReactDOM.render(
  <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">React.StrictMode</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">AuthState</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-name">App</span> /&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-name">AuthState</span>&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-name">React.StrictMode</span>&gt;</span>,
  document.getElementById("root")
);</span>
</code></pre>
<p><strong>App.js</strong></p>
<pre><code class="lang-js"><span class="hljs-keyword">const</span> authContext = useContext(AuthContext);

<span class="hljs-keyword">const</span> { loadUser } = authContext;

useEffect(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> {
  loadUser();
}, []);
</code></pre>
<p><strong>loadUser</strong></p>
<pre><code class="lang-js"><span class="hljs-keyword">const</span> loadUser = async () =&gt; {
  <span class="hljs-keyword">const</span> <span class="hljs-keyword">token</span> = sessionStorage.getItem(<span class="hljs-string">"token"</span>);

  <span class="hljs-keyword">if</span> (!<span class="hljs-keyword">token</span>) {
    dispatch({
      <span class="hljs-keyword">type</span>: <span class="hljs-keyword">ERROR</span>,
    });
  }
  setAuthToken(<span class="hljs-keyword">token</span>);

  try {
    <span class="hljs-keyword">const</span> res = await axios(<span class="hljs-string">"/api/auth"</span>);

    dispatch({
      <span class="hljs-keyword">type</span>: USER_LOADED,
      payload: res.data.data,
    });
  } catch (<span class="hljs-keyword">err</span>) {
    console.<span class="hljs-keyword">error</span>(<span class="hljs-keyword">err</span>);
  }
};
</code></pre>




<ol>
<li><h3 id="what-are-the-benefits-of-new-jsx-transform-">What are the benefits of new JSX transform?</h3>
<p>There are three major benefits of new JSX transform,</p>
<ol>
<li>It is possible to use JSX without importing React packages</li>
<li>The compiled output might improve the bundle size in a small amount</li>
<li>The future improvements provides the flexibility to reduce the number of concepts to learn React.</li>
</ol>
</li>
</ol>




<ol>
<li><h3 id="how-is-the-new-jsx-transform-different-from-old-transform-">How is the new JSX transform different from old transform??</h3>
<p>The new JSX transform doesn’t require React to be in scope. i.e, You don&#39;t need to import React package for simple scenarios.</p>
<p>Let&#39;s take an example to look at the main differences between the old and the new transform,</p>
<p><strong>Old Transform:</strong></p>
<pre><code class="lang-js"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">"react"</span>;

<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">App</span>(<span class="hljs-params"></span>) </span>{
  <span class="hljs-keyword">return</span> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Good morning!!<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span>;
}
</code></pre>
<p>Now JSX transform convert the above code into regular JavaScript as below,</p>
<pre><code class="lang-js"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">"react"</span>;

<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">App</span>(<span class="hljs-params"></span>) </span>{
  <span class="hljs-keyword">return</span> React.createElement(<span class="hljs-string">"h1"</span>, <span class="hljs-literal">null</span>, <span class="hljs-string">"Good morning!!"</span>);
}
</code></pre>
<p><strong>New Transform:</strong></p>
<p>The new JSX transform doesn&#39;t require any React imports</p>
<pre><code class="lang-js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">App</span>(<span class="hljs-params"></span>) </span>{
  <span class="hljs-keyword">return</span> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Good morning!!<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span>;
}
</code></pre>
<p>Under the hood JSX transform compiles to below code</p>
<pre><code class="lang-js"><span class="hljs-keyword">import</span> { jsx <span class="hljs-keyword">as</span> _jsx } <span class="hljs-keyword">from</span> <span class="hljs-string">"react/jsx-runtime"</span>;

<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">App</span>(<span class="hljs-params"></span>) </span>{
  <span class="hljs-keyword">return</span> _jsx(<span class="hljs-string">"h1"</span>, { <span class="hljs-attr">children</span>: <span class="hljs-string">"Good morning!!"</span> });
}
</code></pre>
<p><strong>Note:</strong> You still need to import React to use Hooks.</p>
</li>
</ol>




<ol>
<li><h3 id="how-do-you-get-redux-scaffolding-using-create-react-app-">How do you get redux scaffolding using create-react-app?</h3>
Redux team has provided official redux+js or redux+typescript templates for create-react-app project. The generated project setup includes,<ol>
<li>Redux Toolkit and React-Redux dependencies</li>
<li>Create and configure Redux store</li>
<li>React-Redux <code>&lt;Provider&gt;</code> passing the store to React components</li>
<li>Small &quot;counter&quot; example to demo how to add redux logic and React-Redux hooks API to interact with the store from components
The below commands need to be executed along with template option as below,</li>
<li><strong>Javascript template:</strong><pre><code class="lang-js"><span class="hljs-string">npx </span><span class="hljs-built_in">create-react-app</span> <span class="hljs-string">my-app </span><span class="hljs-built_in">--template</span> <span class="hljs-string">redux</span>
</code></pre>
</li>
<li><strong>Typescript template:</strong><pre><code class="lang-js"><span class="hljs-string">npx </span><span class="hljs-built_in">create-react-app</span> <span class="hljs-string">my-app </span><span class="hljs-built_in">--template</span> <span class="hljs-string">redux-typescript</span>
</code></pre>
<strong><a href="#table-of-contents">⬆ Back to Top</a></strong></li>
</ol>
</li>
<li><h3 id="what-are-react-server-components-">What are React Server components?</h3>
<p>React Server Component is a way to write React component that gets rendered in the server-side with the purpose of improving React app performance. These components allow us to load components from the backend.</p>
<p><strong>Note:</strong> React Server Components is still under development and not recommended for production yet.</p>
</li>
</ol>




<ol>
<li><h3 id="what-is-prop-drilling-">What is prop drilling?</h3>
Prop Drilling is the process by which you pass data from one component of the React Component tree to another by going through other components that do not need the data but only help in passing it around.</li>
</ol>




<ol>
<li><h3 id="what-is-state-mutation-and-how-to-prevent-it-">What is state mutation and how to prevent it?</h3>
<p><code>State mutation</code> happens when you try to update the state of a component without actually using <code>setState</code> function. This can happen when you are trying to do some computations using a state variable and unknowingly save the result in the same state variable. This is the main reason why it is advised to return new instances of state variables from the reducers by using Object.assign({}, ...) or spread syntax.</p>
<p>This can cause unknown issues in the UI as the value of the state variable got updated without telling React to check what all components were being affected from this update and it can cause UI bugs.</p>
<p>Ex:</p>
<pre><code class="lang-javascript"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">component</span> </span>{
  constructor(props) {
    <span class="hljs-keyword">super</span>(props);
    <span class="hljs-keyword">this</span>.state = {
      loading: <span class="hljs-literal">false</span>
    }
 }

componentDidMount() {
  let { loading } = <span class="hljs-keyword">this</span>.state;
  loading = (() =&gt; <span class="hljs-literal">true</span>)(); <span class="hljs-comment">// Trying to perform an operation and directly saving in a state variable</span>
}
</code></pre>
<p><strong>How to prevent it:</strong> Make sure your state variables are immutable by either enforcing immutability by using plugins like Immutable.js, always using <code>setState</code> to make updates, and returning new instances in reducers when sending updated state values.</p>
</li>
</ol>




<ol>
<li><h3 id="what-is-the-difference-between-usestate-and-useref-hook-">What is the difference between useState and useRef hook?</h3>
<ol>
<li>useState causes components to re-render after state updates whereas useRef doesn’t cause a component to re-render when the value or state changes.
Essentially, useRef is like a “box” that can hold a mutable value in its (.current) property.</li>
<li>useState allows us to update the state inside components. While useRef allows referencing DOM elements.</li>
</ol>
</li>
</ol>




<ol>
<li><h3 id="what-is-a-wrapper-component-">What is a wrapper component?</h3>
<p>A wrapper in React is a component that wraps or surrounds another component or group of components. It can be used for a variety of purposes such as adding additional functionality, styling, or layout to the wrapped components.</p>
<p>For example, consider a simple component that displays a message:</p>
<pre><code class="lang-javascript"><span class="hljs-keyword">const</span> Message = <span class="hljs-function">(<span class="hljs-params">{ text }</span>) =&gt;</span> {
  <span class="hljs-keyword">return</span> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>{text}<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span>;
};
</code></pre>
<p>We can create a wrapper component that will add a border to the message component:</p>
<pre><code class="lang-javascript"><span class="hljs-keyword">const</span> MessageWrapper = <span class="hljs-function">(<span class="hljs-params">props</span>) =&gt;</span> {
  <span class="hljs-keyword">return</span> (
    <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">{{</span> <span class="hljs-attr">border:</span> "<span class="hljs-attr">1px</span> <span class="hljs-attr">solid</span> <span class="hljs-attr">black</span>" }}&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-name">Message</span> {<span class="hljs-attr">...props</span>} /&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
  );
};</span>
</code></pre>
<p>Now we can use the MessageWrapper component instead of the Message component and the message will be displayed with a border:</p>
<pre><code class="lang-javascript">&lt;MessageWrapper <span class="hljs-built_in">text</span>=<span class="hljs-string">"Hello World"</span> /&gt;
</code></pre>
<p>Wrapper component can also accept its own props and pass them down to the wrapped component, for example, we can create a wrapper component that will add a title to the message component:</p>
<pre><code class="lang-javascript"><span class="hljs-keyword">const</span> MessageWrapperWithTitle = <span class="hljs-function">(<span class="hljs-params">{title, ...props}</span>) =&gt;</span> {
  <span class="hljs-keyword">return</span> (
    <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>{title}<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-name">Message</span> {<span class="hljs-attr">...props</span>} /&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
  );
};</span>
</code></pre>
<p>Now we can use the MessageWrapperWithTitle component and pass title props:</p>
<pre><code class="lang-javascript">&lt;MessageWrapperWithTitle <span class="hljs-built_in">title</span>=<span class="hljs-string">"My Message"</span> <span class="hljs-keyword">text</span>=<span class="hljs-string">"Hello World"</span> /&gt;
</code></pre>
<p>This way, the wrapper component can add additional functionality, styling, or layout to the wrapped component while keeping the wrapped component simple and reusable.</p>
</li>
</ol>




<ol>
<li><h3 id="what-are-the-differences-between-useeffect-and-uselayouteffect-hooks-">What are the differences between useEffect and useLayoutEffect hooks?</h3>
<p>useEffect and useLayoutEffect are both React hooks that can be used to synchronize a component with an external system, such as a browser API or a third-party library. However, there are some key differences between the two:</p>
<ul>
<li><p>Timing: useEffect runs after the browser has finished painting, while useLayoutEffect runs synchronously before the browser paints. This means that useLayoutEffect can be used to measure and update layout in a way that feels more synchronous to the user.</p>
</li>
<li><p>Browser Paint: useEffect allows browser to paint the changes before running the effect, hence it may cause some visual flicker. useLayoutEffect synchronously runs the effect before browser paints and hence it will avoid visual flicker.</p>
</li>
<li><p>Execution Order: The order in which multiple useEffect hooks are executed is determined by React and may not be predictable. However, the order in which multiple useLayoutEffect hooks are executed is determined by the order in which they were called.</p>
</li>
<li><p>Error handling: useEffect has a built-in mechanism for handling errors that occur during the execution of the effect, so that it does not crash the entire application. useLayoutEffect does not have this mechanism, and errors that occur during the execution of the effect will crash the entire application.</p>
</li>
</ul>
<p>In general, it&#39;s recommended to use useEffect as much as possible, because it is more performant and less prone to errors. useLayoutEffect should only be used when you need to measure or update layout, and you can&#39;t achieve the same result using useEffect.</p>
</li>
</ol>




<ol>
<li><h3 id="what-are-the-differences-between-functional-and-class-components-">What are the differences between Functional and Class Components?</h3>
<p> There are two different ways to create components in ReactJS. The main differences are listed down as below,</p>
<h2 id="1-syntax-">1.  Syntax:</h2>
<p> The classs components uses ES6 classes to create the components. It uses <code>render</code> function to display the HTML content in the webpage.</p>
<p> The syntax for class component looks like as below.</p>
<pre><code class="lang-js">   <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Reacts</span>.<span class="hljs-title">Component</span> </span>{
     render(){
       <span class="hljs-keyword">return</span> &lt;h1&gt;<span class="hljs-type">This</span> is a <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">component&lt;/h1&gt;</span>}</span>
     }
</code></pre>
<p> <strong>Note:</strong> The <strong>Pascal Case</strong> is the recommended approach to provide naming to a component.</p>
<p> Functional component has been improved over the years with some added features like Hooks. Here is a syntax for functional component.</p>
<pre><code class="lang-js"> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">App</span>(<span class="hljs-params"></span>)</span>{
   <span class="hljs-keyword">return</span> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">"App"</span>&gt;</span>
     <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Hello, I'm a function component<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span>
     <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>
 }
</code></pre>
<h2 id="2-state-">2. State:</h2>
<p> State contains information or data about a component which may change over time. </p>
<p> In class component, you can update the state when a user interacts with it or server updates the data using the <code>setState()</code> method. The initial state is going to be assigned in the <code>Constructor( )</code>method using the the <code>this.state</code> object and it is possible to different data types in the <code>this.state</code> object such as string, boolean, numbers, etc.
 <strong>A simple example showing how we use the setState() and constructor()</strong></p>
<pre><code class="lang-js"> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Component</span> </span>{
   constructor() {
     <span class="hljs-keyword">super</span>();
     <span class="hljs-keyword">this</span>.state = {
       message: <span class="hljs-string">"This is a class component"</span>,
     };
   }
   updateMessage() {
     <span class="hljs-keyword">this</span>.setState({t
       message: <span class="hljs-string">"Updating the class component"</span>,
     });
   }
   render() {
     <span class="hljs-keyword">return</span> (
       &lt;&gt;
         &lt;h1&gt;{<span class="hljs-keyword">this</span>.state.message}&lt;/h1&gt;
         &lt;button
           onClick={() =&gt; {
             <span class="hljs-keyword">this</span>.updateMessage();
           }}&gt;
           <span class="hljs-type">Click</span>!!
         &lt;/button&gt;
       &lt;/&gt;
     );
   }
 }
</code></pre>
<p> You not use state in functional components because it was only supported in class components. But over the years hooks have been implemented in functional component which enable to use state in functional component too.</p>
<p> The <code>useState()</code> hook can used to implement state in funcitonal component. It returns an array with two items: the first item is current state and the next one is a function (setState) that updates the value of the current state. </p>
<p> Let&#39;s see an example to demonstrate the state in functional components,</p>
<pre><code class="lang-js"> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">App</span>(<span class="hljs-params"></span>) </span>{
   <span class="hljs-keyword">const</span> [message, setMessage] = useState(<span class="hljs-string">"This is a functional component"</span>);
   <span class="hljs-keyword">const</span> updateMessage = <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> {
     setMessage(<span class="hljs-string">"Updating the functional component"</span>);
   };
   <span class="hljs-keyword">return</span> (
     <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">"App"</span>&gt;</span>
       <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>{message} <span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span>
       <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">{updateMessage}</span>&gt;</span>Click me!!<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>
     <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>
   );
 }
</code></pre>
<h2 id="4-props-">4. Props:</h2>
<p> Props are referred to as &quot;properties&quot;. The props are passed into react component just like arguments passed to a function. In otherwords, they are similar to HTML attributes. </p>
<p> The props are accessible in child class component using <code>this.props</code> as shown in below example,</p>
<pre><code class="lang-js"> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Child</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span> </span>{
   render() {
     <span class="hljs-keyword">return</span> &lt;h1&gt; <span class="hljs-type">This</span> is a functional component and component name is {<span class="hljs-keyword">this</span>.props.name} &lt;/h1&gt;;
   }
 }

 <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Parent</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span> </span>{
   render() {
          <span class="hljs-keyword">return</span> (
             &lt;div className=<span class="hljs-string">"Parent"</span>&gt;
             &lt;<span class="hljs-type">Child</span> name=<span class="hljs-string">"First child component"</span> /&gt;
             &lt;<span class="hljs-type">Child</span> name=<span class="hljs-string">"Second child component"</span> /&gt;
             &lt;/div&gt;
           );
    }
 }
</code></pre>
<p> Props in functional components are similar to that of the class components but the difference is the absence of &#39;this&#39; keyword. </p>
<pre><code class="lang-js"> <span class="hljs-keyword">function</span> <span class="hljs-title">Child</span>(props) {
   <span class="hljs-keyword">return</span> <span class="hljs-type">&lt;h1&gt;This</span> <span class="hljs-keyword">is</span> a child component <span class="hljs-keyword">and</span> the component name <span class="hljs-keyword">is</span>{props.name}&lt;/h1&gt;;
 }

 <span class="hljs-keyword">function</span> <span class="hljs-title">Parent</span>() {
   <span class="hljs-keyword">return</span> <span class="hljs-type">(</span>
     &lt;div className=<span class="hljs-string">"Parent"</span>&gt;
           &lt;Child name=<span class="hljs-string">"First child component"</span> /&gt;
           &lt;Child name=<span class="hljs-string">"Second child component"</span> /&gt;
     &lt;/div&gt;
   );
 }
</code></pre>
</li>
</ol>




<ol>
<li><h3 id="what-is-strict-mode-in-react-">What is strict mode in React?</h3>
<p><code>React.StrictMode</code> is a useful component for highlighting potential problems in an application. Just like <code>&lt;Fragment&gt;</code>, <code>&lt;StrictMode&gt;</code> does not render any extra DOM elements. It activates additional checks and warnings for its descendants. These checks apply for <em>development mode</em> only.</p>
<p>```jsx harmony
import React from &quot;react&quot;;</p>
<p>function ExampleApplication() {
 return (
   <div></p>
<pre><code> <span class="hljs-section">&lt;Header /&gt;</span>
 <span class="hljs-section">&lt;React.StrictMode&gt;</span>
   <span class="hljs-section">&lt;div&gt;</span>
     <span class="hljs-section">&lt;ComponentOne /&gt;</span>
     <span class="hljs-section">&lt;ComponentTwo /&gt;</span>
   <span class="hljs-section">&lt;/div&gt;</span>
 <span class="hljs-section">&lt;/React.StrictMode&gt;</span>
 <span class="hljs-section">&lt;Header /&gt;</span>
</code></pre><p>   </div>
 );
}
```</p>
<p>In the example above, the <em>strict mode</em> checks apply to <code>&lt;ComponentOne&gt;</code> and <code>&lt;ComponentTwo&gt;</code> components only. i.e., Part of the application only.</p>




</li>
<li><h3 id="what-is-the-benefit-of-strict-mode-">What is the benefit of strict mode?</h3>
<p>The <StrictMode> will be helpful in the below cases,</p>
<ol>
<li><p>Whenever the component </p>
</li>
<li><p>Identifying components with <strong>unsafe lifecycle methods</strong>.</p>
</li>
<li>Warning about <strong>legacy string ref</strong> API usage.</li>
<li>Detecting unexpected <strong>side effects</strong>.</li>
<li>Detecting <strong>legacy context</strong> API.</li>
<li>Warning about deprecated findDOMNode usage</li>
</ol>
</li>
</ol>




<ol>
<li><h3 id="why-does-strict-mode-render-twice-in-react-">Why does strict mode render twice in React?</h3>
<p> StrictMode renders components twice in development mode(not production) in order to detect any problems with your code and warn you about those problems. This is used to detect accidental side effects in the render phase.  If you used <code>create-react-app</code> development tool then it automatically enables StrictMode by default.</p>
<pre><code class="lang-js"><span class="xml"> ReactDOM.render(
   <span class="hljs-tag">&lt;<span class="hljs-name">React.StrictMode</span>&gt;</span>
     </span><span class="hljs-template-variable">{App}</span><span class="xml">
   <span class="hljs-tag">&lt;/<span class="hljs-name">React.StrictMode</span>&gt;</span>,
   document.getElementById('root')
 );</span>
</code></pre>
<p> If you want to disable this behavior then you can remove <code>strict</code> mode.</p>
<pre><code class="lang-js"> ReactDOM.render(
   {App}, 
   <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">'root'</span>)
 );
</code></pre>
<p> To detect side effects the following functions are invoked twice:</p>
<ol>
<li>Class component constructor, render, and shouldComponentUpdate methods</li>
<li>Class component static getDerivedStateFromProps method</li>
<li>Function component bodies</li>
<li>State updater functions</li>
<li>Functions passed to useState, useMemo, or useReducer (any Hook)</li>
</ol>
</li>
</ol>




<h2 id="disclaimer">Disclaimer</h2>
<p>The questions provided in this repository are the summary of frequently asked questions across numerous companies. We cannot guarantee that these questions will actually be asked during your interview process, nor should you focus on memorizing all of them. The primary purpose is for you to get a sense of what some companies might ask — do not get discouraged if you don&#39;t know the answer to all of them ⁠— that is ok!</p>
<p>Good luck with your interview 😊</p>
<hr>
]